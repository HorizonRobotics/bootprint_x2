// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: x2.proto

#ifndef PROTOBUF_INCLUDED_x2_2eproto
#define PROTOBUF_INCLUDED_x2_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_x2_2eproto 

namespace protobuf_x2_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[15];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
}  // namespace protobuf_x2_2eproto
namespace x2 {
class Attributes;
class AttributesDefaultTypeInternal;
extern AttributesDefaultTypeInternal _Attributes_default_instance_;
class Box;
class BoxDefaultTypeInternal;
extern BoxDefaultTypeInternal _Box_default_instance_;
class Capture;
class CaptureDefaultTypeInternal;
extern CaptureDefaultTypeInternal _Capture_default_instance_;
class CaptureFrameMessage;
class CaptureFrameMessageDefaultTypeInternal;
extern CaptureFrameMessageDefaultTypeInternal _CaptureFrameMessage_default_instance_;
class CaptureTarget;
class CaptureTargetDefaultTypeInternal;
extern CaptureTargetDefaultTypeInternal _CaptureTarget_default_instance_;
class CharArray;
class CharArrayDefaultTypeInternal;
extern CharArrayDefaultTypeInternal _CharArray_default_instance_;
class DBResult;
class DBResultDefaultTypeInternal;
extern DBResultDefaultTypeInternal _DBResult_default_instance_;
class FloatArray;
class FloatArrayDefaultTypeInternal;
extern FloatArrayDefaultTypeInternal _FloatArray_default_instance_;
class FloatMatrix;
class FloatMatrixDefaultTypeInternal;
extern FloatMatrixDefaultTypeInternal _FloatMatrix_default_instance_;
class FrameMessage;
class FrameMessageDefaultTypeInternal;
extern FrameMessageDefaultTypeInternal _FrameMessage_default_instance_;
class Image;
class ImageDefaultTypeInternal;
extern ImageDefaultTypeInternal _Image_default_instance_;
class Point;
class PointDefaultTypeInternal;
extern PointDefaultTypeInternal _Point_default_instance_;
class Points;
class PointsDefaultTypeInternal;
extern PointsDefaultTypeInternal _Points_default_instance_;
class SmartFrameMessage;
class SmartFrameMessageDefaultTypeInternal;
extern SmartFrameMessageDefaultTypeInternal _SmartFrameMessage_default_instance_;
class Target;
class TargetDefaultTypeInternal;
extern TargetDefaultTypeInternal _Target_default_instance_;
}  // namespace x2
namespace google {
namespace protobuf {
template<> ::x2::Attributes* Arena::CreateMaybeMessage<::x2::Attributes>(Arena*);
template<> ::x2::Box* Arena::CreateMaybeMessage<::x2::Box>(Arena*);
template<> ::x2::Capture* Arena::CreateMaybeMessage<::x2::Capture>(Arena*);
template<> ::x2::CaptureFrameMessage* Arena::CreateMaybeMessage<::x2::CaptureFrameMessage>(Arena*);
template<> ::x2::CaptureTarget* Arena::CreateMaybeMessage<::x2::CaptureTarget>(Arena*);
template<> ::x2::CharArray* Arena::CreateMaybeMessage<::x2::CharArray>(Arena*);
template<> ::x2::DBResult* Arena::CreateMaybeMessage<::x2::DBResult>(Arena*);
template<> ::x2::FloatArray* Arena::CreateMaybeMessage<::x2::FloatArray>(Arena*);
template<> ::x2::FloatMatrix* Arena::CreateMaybeMessage<::x2::FloatMatrix>(Arena*);
template<> ::x2::FrameMessage* Arena::CreateMaybeMessage<::x2::FrameMessage>(Arena*);
template<> ::x2::Image* Arena::CreateMaybeMessage<::x2::Image>(Arena*);
template<> ::x2::Point* Arena::CreateMaybeMessage<::x2::Point>(Arena*);
template<> ::x2::Points* Arena::CreateMaybeMessage<::x2::Points>(Arena*);
template<> ::x2::SmartFrameMessage* Arena::CreateMaybeMessage<::x2::SmartFrameMessage>(Arena*);
template<> ::x2::Target* Arena::CreateMaybeMessage<::x2::Target>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace x2 {

// ===================================================================

class FloatArray : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:x2.FloatArray) */ {
 public:
  FloatArray();
  virtual ~FloatArray();

  FloatArray(const FloatArray& from);

  inline FloatArray& operator=(const FloatArray& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FloatArray(FloatArray&& from) noexcept
    : FloatArray() {
    *this = ::std::move(from);
  }

  inline FloatArray& operator=(FloatArray&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const FloatArray& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FloatArray* internal_default_instance() {
    return reinterpret_cast<const FloatArray*>(
               &_FloatArray_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(FloatArray* other);
  friend void swap(FloatArray& a, FloatArray& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FloatArray* New() const final {
    return CreateMaybeMessage<FloatArray>(NULL);
  }

  FloatArray* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FloatArray>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const FloatArray& from);
  void MergeFrom(const FloatArray& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FloatArray* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float value_ = 2;
  int value__size() const;
  void clear_value_();
  static const int kValueFieldNumber = 2;
  float value_(int index) const;
  void set_value_(int index, float value);
  void add_value_(float value);
  const ::google::protobuf::RepeatedField< float >&
      value_() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_value_();

  // string type_ = 1;
  void clear_type_();
  static const int kTypeFieldNumber = 1;
  const ::std::string& type_() const;
  void set_type_(const ::std::string& value);
  #if LANG_CXX11
  void set_type_(::std::string&& value);
  #endif
  void set_type_(const char* value);
  void set_type_(const char* value, size_t size);
  ::std::string* mutable_type_();
  ::std::string* release_type_();
  void set_allocated_type_(::std::string* type_);

  // @@protoc_insertion_point(class_scope:x2.FloatArray)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedField< float > value__;
  mutable int _value__cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr type__;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_x2_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FloatMatrix : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:x2.FloatMatrix) */ {
 public:
  FloatMatrix();
  virtual ~FloatMatrix();

  FloatMatrix(const FloatMatrix& from);

  inline FloatMatrix& operator=(const FloatMatrix& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FloatMatrix(FloatMatrix&& from) noexcept
    : FloatMatrix() {
    *this = ::std::move(from);
  }

  inline FloatMatrix& operator=(FloatMatrix&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const FloatMatrix& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FloatMatrix* internal_default_instance() {
    return reinterpret_cast<const FloatMatrix*>(
               &_FloatMatrix_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(FloatMatrix* other);
  friend void swap(FloatMatrix& a, FloatMatrix& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FloatMatrix* New() const final {
    return CreateMaybeMessage<FloatMatrix>(NULL);
  }

  FloatMatrix* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FloatMatrix>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const FloatMatrix& from);
  void MergeFrom(const FloatMatrix& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FloatMatrix* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .x2.FloatArray arrays_ = 2;
  int arrays__size() const;
  void clear_arrays_();
  static const int kArraysFieldNumber = 2;
  ::x2::FloatArray* mutable_arrays_(int index);
  ::google::protobuf::RepeatedPtrField< ::x2::FloatArray >*
      mutable_arrays_();
  const ::x2::FloatArray& arrays_(int index) const;
  ::x2::FloatArray* add_arrays_();
  const ::google::protobuf::RepeatedPtrField< ::x2::FloatArray >&
      arrays_() const;

  // string type_ = 1;
  void clear_type_();
  static const int kTypeFieldNumber = 1;
  const ::std::string& type_() const;
  void set_type_(const ::std::string& value);
  #if LANG_CXX11
  void set_type_(::std::string&& value);
  #endif
  void set_type_(const char* value);
  void set_type_(const char* value, size_t size);
  ::std::string* mutable_type_();
  ::std::string* release_type_();
  void set_allocated_type_(::std::string* type_);

  // @@protoc_insertion_point(class_scope:x2.FloatMatrix)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::x2::FloatArray > arrays__;
  ::google::protobuf::internal::ArenaStringPtr type__;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_x2_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Point : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:x2.Point) */ {
 public:
  Point();
  virtual ~Point();

  Point(const Point& from);

  inline Point& operator=(const Point& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Point(Point&& from) noexcept
    : Point() {
    *this = ::std::move(from);
  }

  inline Point& operator=(Point&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const Point& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Point* internal_default_instance() {
    return reinterpret_cast<const Point*>(
               &_Point_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Point* other);
  friend void swap(Point& a, Point& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Point* New() const final {
    return CreateMaybeMessage<Point>(NULL);
  }

  Point* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Point>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const Point& from);
  void MergeFrom(const Point& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Point* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float x_ = 1;
  void clear_x_();
  static const int kXFieldNumber = 1;
  float x_() const;
  void set_x_(float value);

  // float y_ = 2;
  void clear_y_();
  static const int kYFieldNumber = 2;
  float y_() const;
  void set_y_(float value);

  // float score_ = 3;
  void clear_score_();
  static const int kScoreFieldNumber = 3;
  float score_() const;
  void set_score_(float value);

  // @@protoc_insertion_point(class_scope:x2.Point)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  float x__;
  float y__;
  float score__;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_x2_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Points : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:x2.Points) */ {
 public:
  Points();
  virtual ~Points();

  Points(const Points& from);

  inline Points& operator=(const Points& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Points(Points&& from) noexcept
    : Points() {
    *this = ::std::move(from);
  }

  inline Points& operator=(Points&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const Points& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Points* internal_default_instance() {
    return reinterpret_cast<const Points*>(
               &_Points_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Points* other);
  friend void swap(Points& a, Points& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Points* New() const final {
    return CreateMaybeMessage<Points>(NULL);
  }

  Points* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Points>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const Points& from);
  void MergeFrom(const Points& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Points* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .x2.Point points_ = 2;
  int points__size() const;
  void clear_points_();
  static const int kPointsFieldNumber = 2;
  ::x2::Point* mutable_points_(int index);
  ::google::protobuf::RepeatedPtrField< ::x2::Point >*
      mutable_points_();
  const ::x2::Point& points_(int index) const;
  ::x2::Point* add_points_();
  const ::google::protobuf::RepeatedPtrField< ::x2::Point >&
      points_() const;

  // string type_ = 1;
  void clear_type_();
  static const int kTypeFieldNumber = 1;
  const ::std::string& type_() const;
  void set_type_(const ::std::string& value);
  #if LANG_CXX11
  void set_type_(::std::string&& value);
  #endif
  void set_type_(const char* value);
  void set_type_(const char* value, size_t size);
  ::std::string* mutable_type_();
  ::std::string* release_type_();
  void set_allocated_type_(::std::string* type_);

  // @@protoc_insertion_point(class_scope:x2.Points)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::x2::Point > points__;
  ::google::protobuf::internal::ArenaStringPtr type__;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_x2_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Box : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:x2.Box) */ {
 public:
  Box();
  virtual ~Box();

  Box(const Box& from);

  inline Box& operator=(const Box& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Box(Box&& from) noexcept
    : Box() {
    *this = ::std::move(from);
  }

  inline Box& operator=(Box&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const Box& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Box* internal_default_instance() {
    return reinterpret_cast<const Box*>(
               &_Box_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(Box* other);
  friend void swap(Box& a, Box& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Box* New() const final {
    return CreateMaybeMessage<Box>(NULL);
  }

  Box* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Box>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const Box& from);
  void MergeFrom(const Box& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Box* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string type_ = 1;
  void clear_type_();
  static const int kTypeFieldNumber = 1;
  const ::std::string& type_() const;
  void set_type_(const ::std::string& value);
  #if LANG_CXX11
  void set_type_(::std::string&& value);
  #endif
  void set_type_(const char* value);
  void set_type_(const char* value, size_t size);
  ::std::string* mutable_type_();
  ::std::string* release_type_();
  void set_allocated_type_(::std::string* type_);

  // .x2.Point top_left_ = 2;
  bool has_top_left_() const;
  void clear_top_left_();
  static const int kTopLeftFieldNumber = 2;
  private:
  const ::x2::Point& _internal_top_left_() const;
  public:
  const ::x2::Point& top_left_() const;
  ::x2::Point* release_top_left_();
  ::x2::Point* mutable_top_left_();
  void set_allocated_top_left_(::x2::Point* top_left_);

  // .x2.Point bottom_right_ = 3;
  bool has_bottom_right_() const;
  void clear_bottom_right_();
  static const int kBottomRightFieldNumber = 3;
  private:
  const ::x2::Point& _internal_bottom_right_() const;
  public:
  const ::x2::Point& bottom_right_() const;
  ::x2::Point* release_bottom_right_();
  ::x2::Point* mutable_bottom_right_();
  void set_allocated_bottom_right_(::x2::Point* bottom_right_);

  // @@protoc_insertion_point(class_scope:x2.Box)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr type__;
  ::x2::Point* top_left__;
  ::x2::Point* bottom_right__;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_x2_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Attributes : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:x2.Attributes) */ {
 public:
  Attributes();
  virtual ~Attributes();

  Attributes(const Attributes& from);

  inline Attributes& operator=(const Attributes& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Attributes(Attributes&& from) noexcept
    : Attributes() {
    *this = ::std::move(from);
  }

  inline Attributes& operator=(Attributes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const Attributes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Attributes* internal_default_instance() {
    return reinterpret_cast<const Attributes*>(
               &_Attributes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(Attributes* other);
  friend void swap(Attributes& a, Attributes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Attributes* New() const final {
    return CreateMaybeMessage<Attributes>(NULL);
  }

  Attributes* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Attributes>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const Attributes& from);
  void MergeFrom(const Attributes& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Attributes* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string type_ = 1;
  void clear_type_();
  static const int kTypeFieldNumber = 1;
  const ::std::string& type_() const;
  void set_type_(const ::std::string& value);
  #if LANG_CXX11
  void set_type_(::std::string&& value);
  #endif
  void set_type_(const char* value);
  void set_type_(const char* value, size_t size);
  ::std::string* mutable_type_();
  ::std::string* release_type_();
  void set_allocated_type_(::std::string* type_);

  // float value_ = 2;
  void clear_value_();
  static const int kValueFieldNumber = 2;
  float value_() const;
  void set_value_(float value);

  // float score_ = 3;
  void clear_score_();
  static const int kScoreFieldNumber = 3;
  float score_() const;
  void set_score_(float value);

  // @@protoc_insertion_point(class_scope:x2.Attributes)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr type__;
  float value__;
  float score__;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_x2_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Target : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:x2.Target) */ {
 public:
  Target();
  virtual ~Target();

  Target(const Target& from);

  inline Target& operator=(const Target& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Target(Target&& from) noexcept
    : Target() {
    *this = ::std::move(from);
  }

  inline Target& operator=(Target&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const Target& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Target* internal_default_instance() {
    return reinterpret_cast<const Target*>(
               &_Target_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(Target* other);
  friend void swap(Target& a, Target& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Target* New() const final {
    return CreateMaybeMessage<Target>(NULL);
  }

  Target* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Target>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const Target& from);
  void MergeFrom(const Target& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Target* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .x2.Box boxes_ = 3;
  int boxes__size() const;
  void clear_boxes_();
  static const int kBoxesFieldNumber = 3;
  ::x2::Box* mutable_boxes_(int index);
  ::google::protobuf::RepeatedPtrField< ::x2::Box >*
      mutable_boxes_();
  const ::x2::Box& boxes_(int index) const;
  ::x2::Box* add_boxes_();
  const ::google::protobuf::RepeatedPtrField< ::x2::Box >&
      boxes_() const;

  // repeated .x2.Attributes attributes_ = 4;
  int attributes__size() const;
  void clear_attributes_();
  static const int kAttributesFieldNumber = 4;
  ::x2::Attributes* mutable_attributes_(int index);
  ::google::protobuf::RepeatedPtrField< ::x2::Attributes >*
      mutable_attributes_();
  const ::x2::Attributes& attributes_(int index) const;
  ::x2::Attributes* add_attributes_();
  const ::google::protobuf::RepeatedPtrField< ::x2::Attributes >&
      attributes_() const;

  // repeated .x2.Points points_ = 5;
  int points__size() const;
  void clear_points_();
  static const int kPointsFieldNumber = 5;
  ::x2::Points* mutable_points_(int index);
  ::google::protobuf::RepeatedPtrField< ::x2::Points >*
      mutable_points_();
  const ::x2::Points& points_(int index) const;
  ::x2::Points* add_points_();
  const ::google::protobuf::RepeatedPtrField< ::x2::Points >&
      points_() const;

  // repeated .x2.FloatArray float_arrays_ = 6;
  int float_arrays__size() const;
  void clear_float_arrays_();
  static const int kFloatArraysFieldNumber = 6;
  ::x2::FloatArray* mutable_float_arrays_(int index);
  ::google::protobuf::RepeatedPtrField< ::x2::FloatArray >*
      mutable_float_arrays_();
  const ::x2::FloatArray& float_arrays_(int index) const;
  ::x2::FloatArray* add_float_arrays_();
  const ::google::protobuf::RepeatedPtrField< ::x2::FloatArray >&
      float_arrays_() const;

  // repeated .x2.FloatMatrix float_matrixs_ = 7;
  int float_matrixs__size() const;
  void clear_float_matrixs_();
  static const int kFloatMatrixsFieldNumber = 7;
  ::x2::FloatMatrix* mutable_float_matrixs_(int index);
  ::google::protobuf::RepeatedPtrField< ::x2::FloatMatrix >*
      mutable_float_matrixs_();
  const ::x2::FloatMatrix& float_matrixs_(int index) const;
  ::x2::FloatMatrix* add_float_matrixs_();
  const ::google::protobuf::RepeatedPtrField< ::x2::FloatMatrix >&
      float_matrixs_() const;

  // string type_ = 1;
  void clear_type_();
  static const int kTypeFieldNumber = 1;
  const ::std::string& type_() const;
  void set_type_(const ::std::string& value);
  #if LANG_CXX11
  void set_type_(::std::string&& value);
  #endif
  void set_type_(const char* value);
  void set_type_(const char* value, size_t size);
  ::std::string* mutable_type_();
  ::std::string* release_type_();
  void set_allocated_type_(::std::string* type_);

  // uint64 track_id_ = 2;
  void clear_track_id_();
  static const int kTrackIdFieldNumber = 2;
  ::google::protobuf::uint64 track_id_() const;
  void set_track_id_(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:x2.Target)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::x2::Box > boxes__;
  ::google::protobuf::RepeatedPtrField< ::x2::Attributes > attributes__;
  ::google::protobuf::RepeatedPtrField< ::x2::Points > points__;
  ::google::protobuf::RepeatedPtrField< ::x2::FloatArray > float_arrays__;
  ::google::protobuf::RepeatedPtrField< ::x2::FloatMatrix > float_matrixs__;
  ::google::protobuf::internal::ArenaStringPtr type__;
  ::google::protobuf::uint64 track_id__;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_x2_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SmartFrameMessage : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:x2.SmartFrameMessage) */ {
 public:
  SmartFrameMessage();
  virtual ~SmartFrameMessage();

  SmartFrameMessage(const SmartFrameMessage& from);

  inline SmartFrameMessage& operator=(const SmartFrameMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SmartFrameMessage(SmartFrameMessage&& from) noexcept
    : SmartFrameMessage() {
    *this = ::std::move(from);
  }

  inline SmartFrameMessage& operator=(SmartFrameMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const SmartFrameMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SmartFrameMessage* internal_default_instance() {
    return reinterpret_cast<const SmartFrameMessage*>(
               &_SmartFrameMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(SmartFrameMessage* other);
  friend void swap(SmartFrameMessage& a, SmartFrameMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SmartFrameMessage* New() const final {
    return CreateMaybeMessage<SmartFrameMessage>(NULL);
  }

  SmartFrameMessage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SmartFrameMessage>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const SmartFrameMessage& from);
  void MergeFrom(const SmartFrameMessage& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SmartFrameMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .x2.Target targets_ = 3;
  int targets__size() const;
  void clear_targets_();
  static const int kTargetsFieldNumber = 3;
  ::x2::Target* mutable_targets_(int index);
  ::google::protobuf::RepeatedPtrField< ::x2::Target >*
      mutable_targets_();
  const ::x2::Target& targets_(int index) const;
  ::x2::Target* add_targets_();
  const ::google::protobuf::RepeatedPtrField< ::x2::Target >&
      targets_() const;

  // fixed64 timestamp_ = 1;
  void clear_timestamp_();
  static const int kTimestampFieldNumber = 1;
  ::google::protobuf::uint64 timestamp_() const;
  void set_timestamp_(::google::protobuf::uint64 value);

  // uint32 error_code_ = 2;
  void clear_error_code_();
  static const int kErrorCodeFieldNumber = 2;
  ::google::protobuf::uint32 error_code_() const;
  void set_error_code_(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:x2.SmartFrameMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::x2::Target > targets__;
  ::google::protobuf::uint64 timestamp__;
  ::google::protobuf::uint32 error_code__;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_x2_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DBResult : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:x2.DBResult) */ {
 public:
  DBResult();
  virtual ~DBResult();

  DBResult(const DBResult& from);

  inline DBResult& operator=(const DBResult& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DBResult(DBResult&& from) noexcept
    : DBResult() {
    *this = ::std::move(from);
  }

  inline DBResult& operator=(DBResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const DBResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DBResult* internal_default_instance() {
    return reinterpret_cast<const DBResult*>(
               &_DBResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(DBResult* other);
  friend void swap(DBResult& a, DBResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DBResult* New() const final {
    return CreateMaybeMessage<DBResult>(NULL);
  }

  DBResult* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DBResult>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const DBResult& from);
  void MergeFrom(const DBResult& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DBResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string db_type_ = 1;
  void clear_db_type_();
  static const int kDbTypeFieldNumber = 1;
  const ::std::string& db_type_() const;
  void set_db_type_(const ::std::string& value);
  #if LANG_CXX11
  void set_db_type_(::std::string&& value);
  #endif
  void set_db_type_(const char* value);
  void set_db_type_(const char* value, size_t size);
  ::std::string* mutable_db_type_();
  ::std::string* release_db_type_();
  void set_allocated_db_type_(::std::string* db_type_);

  // string match_id_ = 2;
  void clear_match_id_();
  static const int kMatchIdFieldNumber = 2;
  const ::std::string& match_id_() const;
  void set_match_id_(const ::std::string& value);
  #if LANG_CXX11
  void set_match_id_(::std::string&& value);
  #endif
  void set_match_id_(const char* value);
  void set_match_id_(const char* value, size_t size);
  ::std::string* mutable_match_id_();
  ::std::string* release_match_id_();
  void set_allocated_match_id_(::std::string* match_id_);

  // float distance_ = 3;
  void clear_distance_();
  static const int kDistanceFieldNumber = 3;
  float distance_() const;
  void set_distance_(float value);

  // float similarity_ = 4;
  void clear_similarity_();
  static const int kSimilarityFieldNumber = 4;
  float similarity_() const;
  void set_similarity_(float value);

  // @@protoc_insertion_point(class_scope:x2.DBResult)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr db_type__;
  ::google::protobuf::internal::ArenaStringPtr match_id__;
  float distance__;
  float similarity__;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_x2_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Image : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:x2.Image) */ {
 public:
  Image();
  virtual ~Image();

  Image(const Image& from);

  inline Image& operator=(const Image& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Image(Image&& from) noexcept
    : Image() {
    *this = ::std::move(from);
  }

  inline Image& operator=(Image&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const Image& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Image* internal_default_instance() {
    return reinterpret_cast<const Image*>(
               &_Image_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(Image* other);
  friend void swap(Image& a, Image& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Image* New() const final {
    return CreateMaybeMessage<Image>(NULL);
  }

  Image* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Image>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const Image& from);
  void MergeFrom(const Image& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Image* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes buf_ = 1;
  void clear_buf_();
  static const int kBufFieldNumber = 1;
  const ::std::string& buf_() const;
  void set_buf_(const ::std::string& value);
  #if LANG_CXX11
  void set_buf_(::std::string&& value);
  #endif
  void set_buf_(const char* value);
  void set_buf_(const void* value, size_t size);
  ::std::string* mutable_buf_();
  ::std::string* release_buf_();
  void set_allocated_buf_(::std::string* buf_);

  // string type_ = 2;
  void clear_type_();
  static const int kTypeFieldNumber = 2;
  const ::std::string& type_() const;
  void set_type_(const ::std::string& value);
  #if LANG_CXX11
  void set_type_(::std::string&& value);
  #endif
  void set_type_(const char* value);
  void set_type_(const char* value, size_t size);
  ::std::string* mutable_type_();
  ::std::string* release_type_();
  void set_allocated_type_(::std::string* type_);

  // uint32 width_ = 3;
  void clear_width_();
  static const int kWidthFieldNumber = 3;
  ::google::protobuf::uint32 width_() const;
  void set_width_(::google::protobuf::uint32 value);

  // uint32 height_ = 4;
  void clear_height_();
  static const int kHeightFieldNumber = 4;
  ::google::protobuf::uint32 height_() const;
  void set_height_(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:x2.Image)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr buf__;
  ::google::protobuf::internal::ArenaStringPtr type__;
  ::google::protobuf::uint32 width__;
  ::google::protobuf::uint32 height__;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_x2_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CharArray : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:x2.CharArray) */ {
 public:
  CharArray();
  virtual ~CharArray();

  CharArray(const CharArray& from);

  inline CharArray& operator=(const CharArray& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CharArray(CharArray&& from) noexcept
    : CharArray() {
    *this = ::std::move(from);
  }

  inline CharArray& operator=(CharArray&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const CharArray& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CharArray* internal_default_instance() {
    return reinterpret_cast<const CharArray*>(
               &_CharArray_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(CharArray* other);
  friend void swap(CharArray& a, CharArray& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CharArray* New() const final {
    return CreateMaybeMessage<CharArray>(NULL);
  }

  CharArray* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CharArray>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const CharArray& from);
  void MergeFrom(const CharArray& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CharArray* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string type_ = 1;
  void clear_type_();
  static const int kTypeFieldNumber = 1;
  const ::std::string& type_() const;
  void set_type_(const ::std::string& value);
  #if LANG_CXX11
  void set_type_(::std::string&& value);
  #endif
  void set_type_(const char* value);
  void set_type_(const char* value, size_t size);
  ::std::string* mutable_type_();
  ::std::string* release_type_();
  void set_allocated_type_(::std::string* type_);

  // bytes array_ = 2;
  void clear_array_();
  static const int kArrayFieldNumber = 2;
  const ::std::string& array_() const;
  void set_array_(const ::std::string& value);
  #if LANG_CXX11
  void set_array_(::std::string&& value);
  #endif
  void set_array_(const char* value);
  void set_array_(const void* value, size_t size);
  ::std::string* mutable_array_();
  ::std::string* release_array_();
  void set_allocated_array_(::std::string* array_);

  // @@protoc_insertion_point(class_scope:x2.CharArray)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr type__;
  ::google::protobuf::internal::ArenaStringPtr array__;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_x2_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Capture : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:x2.Capture) */ {
 public:
  Capture();
  virtual ~Capture();

  Capture(const Capture& from);

  inline Capture& operator=(const Capture& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Capture(Capture&& from) noexcept
    : Capture() {
    *this = ::std::move(from);
  }

  inline Capture& operator=(Capture&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const Capture& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Capture* internal_default_instance() {
    return reinterpret_cast<const Capture*>(
               &_Capture_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(Capture* other);
  friend void swap(Capture& a, Capture& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Capture* New() const final {
    return CreateMaybeMessage<Capture>(NULL);
  }

  Capture* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Capture>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const Capture& from);
  void MergeFrom(const Capture& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Capture* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .x2.Box boxes_ = 4;
  int boxes__size() const;
  void clear_boxes_();
  static const int kBoxesFieldNumber = 4;
  ::x2::Box* mutable_boxes_(int index);
  ::google::protobuf::RepeatedPtrField< ::x2::Box >*
      mutable_boxes_();
  const ::x2::Box& boxes_(int index) const;
  ::x2::Box* add_boxes_();
  const ::google::protobuf::RepeatedPtrField< ::x2::Box >&
      boxes_() const;

  // repeated .x2.Attributes attributes_ = 5;
  int attributes__size() const;
  void clear_attributes_();
  static const int kAttributesFieldNumber = 5;
  ::x2::Attributes* mutable_attributes_(int index);
  ::google::protobuf::RepeatedPtrField< ::x2::Attributes >*
      mutable_attributes_();
  const ::x2::Attributes& attributes_(int index) const;
  ::x2::Attributes* add_attributes_();
  const ::google::protobuf::RepeatedPtrField< ::x2::Attributes >&
      attributes_() const;

  // repeated .x2.Points points_ = 6;
  int points__size() const;
  void clear_points_();
  static const int kPointsFieldNumber = 6;
  ::x2::Points* mutable_points_(int index);
  ::google::protobuf::RepeatedPtrField< ::x2::Points >*
      mutable_points_();
  const ::x2::Points& points_(int index) const;
  ::x2::Points* add_points_();
  const ::google::protobuf::RepeatedPtrField< ::x2::Points >&
      points_() const;

  // repeated .x2.FloatArray float_arrays_ = 7;
  int float_arrays__size() const;
  void clear_float_arrays_();
  static const int kFloatArraysFieldNumber = 7;
  ::x2::FloatArray* mutable_float_arrays_(int index);
  ::google::protobuf::RepeatedPtrField< ::x2::FloatArray >*
      mutable_float_arrays_();
  const ::x2::FloatArray& float_arrays_(int index) const;
  ::x2::FloatArray* add_float_arrays_();
  const ::google::protobuf::RepeatedPtrField< ::x2::FloatArray >&
      float_arrays_() const;

  // repeated .x2.CharArray char_arrays_ = 8;
  int char_arrays__size() const;
  void clear_char_arrays_();
  static const int kCharArraysFieldNumber = 8;
  ::x2::CharArray* mutable_char_arrays_(int index);
  ::google::protobuf::RepeatedPtrField< ::x2::CharArray >*
      mutable_char_arrays_();
  const ::x2::CharArray& char_arrays_(int index) const;
  ::x2::CharArray* add_char_arrays_();
  const ::google::protobuf::RepeatedPtrField< ::x2::CharArray >&
      char_arrays_() const;

  // string type_ = 1;
  void clear_type_();
  static const int kTypeFieldNumber = 1;
  const ::std::string& type_() const;
  void set_type_(const ::std::string& value);
  #if LANG_CXX11
  void set_type_(::std::string&& value);
  #endif
  void set_type_(const char* value);
  void set_type_(const char* value, size_t size);
  ::std::string* mutable_type_();
  ::std::string* release_type_();
  void set_allocated_type_(::std::string* type_);

  // .x2.Image img_ = 3;
  bool has_img_() const;
  void clear_img_();
  static const int kImgFieldNumber = 3;
  private:
  const ::x2::Image& _internal_img_() const;
  public:
  const ::x2::Image& img_() const;
  ::x2::Image* release_img_();
  ::x2::Image* mutable_img_();
  void set_allocated_img_(::x2::Image* img_);

  // fixed64 timestamp_ = 2;
  void clear_timestamp_();
  static const int kTimestampFieldNumber = 2;
  ::google::protobuf::uint64 timestamp_() const;
  void set_timestamp_(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:x2.Capture)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::x2::Box > boxes__;
  ::google::protobuf::RepeatedPtrField< ::x2::Attributes > attributes__;
  ::google::protobuf::RepeatedPtrField< ::x2::Points > points__;
  ::google::protobuf::RepeatedPtrField< ::x2::FloatArray > float_arrays__;
  ::google::protobuf::RepeatedPtrField< ::x2::CharArray > char_arrays__;
  ::google::protobuf::internal::ArenaStringPtr type__;
  ::x2::Image* img__;
  ::google::protobuf::uint64 timestamp__;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_x2_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CaptureTarget : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:x2.CaptureTarget) */ {
 public:
  CaptureTarget();
  virtual ~CaptureTarget();

  CaptureTarget(const CaptureTarget& from);

  inline CaptureTarget& operator=(const CaptureTarget& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CaptureTarget(CaptureTarget&& from) noexcept
    : CaptureTarget() {
    *this = ::std::move(from);
  }

  inline CaptureTarget& operator=(CaptureTarget&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const CaptureTarget& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CaptureTarget* internal_default_instance() {
    return reinterpret_cast<const CaptureTarget*>(
               &_CaptureTarget_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(CaptureTarget* other);
  friend void swap(CaptureTarget& a, CaptureTarget& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CaptureTarget* New() const final {
    return CreateMaybeMessage<CaptureTarget>(NULL);
  }

  CaptureTarget* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CaptureTarget>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const CaptureTarget& from);
  void MergeFrom(const CaptureTarget& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CaptureTarget* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .x2.Capture captures_ = 3;
  int captures__size() const;
  void clear_captures_();
  static const int kCapturesFieldNumber = 3;
  ::x2::Capture* mutable_captures_(int index);
  ::google::protobuf::RepeatedPtrField< ::x2::Capture >*
      mutable_captures_();
  const ::x2::Capture& captures_(int index) const;
  ::x2::Capture* add_captures_();
  const ::google::protobuf::RepeatedPtrField< ::x2::Capture >&
      captures_() const;

  // repeated .x2.DBResult db_results_ = 4;
  int db_results__size() const;
  void clear_db_results_();
  static const int kDbResultsFieldNumber = 4;
  ::x2::DBResult* mutable_db_results_(int index);
  ::google::protobuf::RepeatedPtrField< ::x2::DBResult >*
      mutable_db_results_();
  const ::x2::DBResult& db_results_(int index) const;
  ::x2::DBResult* add_db_results_();
  const ::google::protobuf::RepeatedPtrField< ::x2::DBResult >&
      db_results_() const;

  // string type_ = 1;
  void clear_type_();
  static const int kTypeFieldNumber = 1;
  const ::std::string& type_() const;
  void set_type_(const ::std::string& value);
  #if LANG_CXX11
  void set_type_(::std::string&& value);
  #endif
  void set_type_(const char* value);
  void set_type_(const char* value, size_t size);
  ::std::string* mutable_type_();
  ::std::string* release_type_();
  void set_allocated_type_(::std::string* type_);

  // uint64 track_id_ = 2;
  void clear_track_id_();
  static const int kTrackIdFieldNumber = 2;
  ::google::protobuf::uint64 track_id_() const;
  void set_track_id_(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:x2.CaptureTarget)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::x2::Capture > captures__;
  ::google::protobuf::RepeatedPtrField< ::x2::DBResult > db_results__;
  ::google::protobuf::internal::ArenaStringPtr type__;
  ::google::protobuf::uint64 track_id__;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_x2_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CaptureFrameMessage : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:x2.CaptureFrameMessage) */ {
 public:
  CaptureFrameMessage();
  virtual ~CaptureFrameMessage();

  CaptureFrameMessage(const CaptureFrameMessage& from);

  inline CaptureFrameMessage& operator=(const CaptureFrameMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CaptureFrameMessage(CaptureFrameMessage&& from) noexcept
    : CaptureFrameMessage() {
    *this = ::std::move(from);
  }

  inline CaptureFrameMessage& operator=(CaptureFrameMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const CaptureFrameMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CaptureFrameMessage* internal_default_instance() {
    return reinterpret_cast<const CaptureFrameMessage*>(
               &_CaptureFrameMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(CaptureFrameMessage* other);
  friend void swap(CaptureFrameMessage& a, CaptureFrameMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CaptureFrameMessage* New() const final {
    return CreateMaybeMessage<CaptureFrameMessage>(NULL);
  }

  CaptureFrameMessage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CaptureFrameMessage>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const CaptureFrameMessage& from);
  void MergeFrom(const CaptureFrameMessage& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CaptureFrameMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .x2.CaptureTarget targets_ = 1;
  int targets__size() const;
  void clear_targets_();
  static const int kTargetsFieldNumber = 1;
  ::x2::CaptureTarget* mutable_targets_(int index);
  ::google::protobuf::RepeatedPtrField< ::x2::CaptureTarget >*
      mutable_targets_();
  const ::x2::CaptureTarget& targets_(int index) const;
  ::x2::CaptureTarget* add_targets_();
  const ::google::protobuf::RepeatedPtrField< ::x2::CaptureTarget >&
      targets_() const;

  // @@protoc_insertion_point(class_scope:x2.CaptureFrameMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::x2::CaptureTarget > targets__;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_x2_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FrameMessage : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:x2.FrameMessage) */ {
 public:
  FrameMessage();
  virtual ~FrameMessage();

  FrameMessage(const FrameMessage& from);

  inline FrameMessage& operator=(const FrameMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FrameMessage(FrameMessage&& from) noexcept
    : FrameMessage() {
    *this = ::std::move(from);
  }

  inline FrameMessage& operator=(FrameMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const FrameMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FrameMessage* internal_default_instance() {
    return reinterpret_cast<const FrameMessage*>(
               &_FrameMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(FrameMessage* other);
  friend void swap(FrameMessage& a, FrameMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FrameMessage* New() const final {
    return CreateMaybeMessage<FrameMessage>(NULL);
  }

  FrameMessage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FrameMessage>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const FrameMessage& from);
  void MergeFrom(const FrameMessage& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FrameMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .x2.SmartFrameMessage smart_msg_ = 1;
  bool has_smart_msg_() const;
  void clear_smart_msg_();
  static const int kSmartMsgFieldNumber = 1;
  private:
  const ::x2::SmartFrameMessage& _internal_smart_msg_() const;
  public:
  const ::x2::SmartFrameMessage& smart_msg_() const;
  ::x2::SmartFrameMessage* release_smart_msg_();
  ::x2::SmartFrameMessage* mutable_smart_msg_();
  void set_allocated_smart_msg_(::x2::SmartFrameMessage* smart_msg_);

  // .x2.CaptureFrameMessage capture_msg_ = 2;
  bool has_capture_msg_() const;
  void clear_capture_msg_();
  static const int kCaptureMsgFieldNumber = 2;
  private:
  const ::x2::CaptureFrameMessage& _internal_capture_msg_() const;
  public:
  const ::x2::CaptureFrameMessage& capture_msg_() const;
  ::x2::CaptureFrameMessage* release_capture_msg_();
  ::x2::CaptureFrameMessage* mutable_capture_msg_();
  void set_allocated_capture_msg_(::x2::CaptureFrameMessage* capture_msg_);

  // @@protoc_insertion_point(class_scope:x2.FrameMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::x2::SmartFrameMessage* smart_msg__;
  ::x2::CaptureFrameMessage* capture_msg__;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_x2_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FloatArray

// string type_ = 1;
inline void FloatArray::clear_type_() {
  type__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FloatArray::type_() const {
  // @@protoc_insertion_point(field_get:x2.FloatArray.type_)
  return type__.GetNoArena();
}
inline void FloatArray::set_type_(const ::std::string& value) {
  
  type__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:x2.FloatArray.type_)
}
#if LANG_CXX11
inline void FloatArray::set_type_(::std::string&& value) {
  
  type__.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:x2.FloatArray.type_)
}
#endif
inline void FloatArray::set_type_(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  type__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:x2.FloatArray.type_)
}
inline void FloatArray::set_type_(const char* value, size_t size) {
  
  type__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:x2.FloatArray.type_)
}
inline ::std::string* FloatArray::mutable_type_() {
  
  // @@protoc_insertion_point(field_mutable:x2.FloatArray.type_)
  return type__.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FloatArray::release_type_() {
  // @@protoc_insertion_point(field_release:x2.FloatArray.type_)
  
  return type__.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FloatArray::set_allocated_type_(::std::string* type_) {
  if (type_ != NULL) {
    
  } else {
    
  }
  type__.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type_);
  // @@protoc_insertion_point(field_set_allocated:x2.FloatArray.type_)
}

// repeated float value_ = 2;
inline int FloatArray::value__size() const {
  return value__.size();
}
inline void FloatArray::clear_value_() {
  value__.Clear();
}
inline float FloatArray::value_(int index) const {
  // @@protoc_insertion_point(field_get:x2.FloatArray.value_)
  return value__.Get(index);
}
inline void FloatArray::set_value_(int index, float value) {
  value__.Set(index, value);
  // @@protoc_insertion_point(field_set:x2.FloatArray.value_)
}
inline void FloatArray::add_value_(float value) {
  value__.Add(value);
  // @@protoc_insertion_point(field_add:x2.FloatArray.value_)
}
inline const ::google::protobuf::RepeatedField< float >&
FloatArray::value_() const {
  // @@protoc_insertion_point(field_list:x2.FloatArray.value_)
  return value__;
}
inline ::google::protobuf::RepeatedField< float >*
FloatArray::mutable_value_() {
  // @@protoc_insertion_point(field_mutable_list:x2.FloatArray.value_)
  return &value__;
}

// -------------------------------------------------------------------

// FloatMatrix

// string type_ = 1;
inline void FloatMatrix::clear_type_() {
  type__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FloatMatrix::type_() const {
  // @@protoc_insertion_point(field_get:x2.FloatMatrix.type_)
  return type__.GetNoArena();
}
inline void FloatMatrix::set_type_(const ::std::string& value) {
  
  type__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:x2.FloatMatrix.type_)
}
#if LANG_CXX11
inline void FloatMatrix::set_type_(::std::string&& value) {
  
  type__.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:x2.FloatMatrix.type_)
}
#endif
inline void FloatMatrix::set_type_(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  type__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:x2.FloatMatrix.type_)
}
inline void FloatMatrix::set_type_(const char* value, size_t size) {
  
  type__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:x2.FloatMatrix.type_)
}
inline ::std::string* FloatMatrix::mutable_type_() {
  
  // @@protoc_insertion_point(field_mutable:x2.FloatMatrix.type_)
  return type__.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FloatMatrix::release_type_() {
  // @@protoc_insertion_point(field_release:x2.FloatMatrix.type_)
  
  return type__.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FloatMatrix::set_allocated_type_(::std::string* type_) {
  if (type_ != NULL) {
    
  } else {
    
  }
  type__.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type_);
  // @@protoc_insertion_point(field_set_allocated:x2.FloatMatrix.type_)
}

// repeated .x2.FloatArray arrays_ = 2;
inline int FloatMatrix::arrays__size() const {
  return arrays__.size();
}
inline void FloatMatrix::clear_arrays_() {
  arrays__.Clear();
}
inline ::x2::FloatArray* FloatMatrix::mutable_arrays_(int index) {
  // @@protoc_insertion_point(field_mutable:x2.FloatMatrix.arrays_)
  return arrays__.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::x2::FloatArray >*
FloatMatrix::mutable_arrays_() {
  // @@protoc_insertion_point(field_mutable_list:x2.FloatMatrix.arrays_)
  return &arrays__;
}
inline const ::x2::FloatArray& FloatMatrix::arrays_(int index) const {
  // @@protoc_insertion_point(field_get:x2.FloatMatrix.arrays_)
  return arrays__.Get(index);
}
inline ::x2::FloatArray* FloatMatrix::add_arrays_() {
  // @@protoc_insertion_point(field_add:x2.FloatMatrix.arrays_)
  return arrays__.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::x2::FloatArray >&
FloatMatrix::arrays_() const {
  // @@protoc_insertion_point(field_list:x2.FloatMatrix.arrays_)
  return arrays__;
}

// -------------------------------------------------------------------

// Point

// float x_ = 1;
inline void Point::clear_x_() {
  x__ = 0;
}
inline float Point::x_() const {
  // @@protoc_insertion_point(field_get:x2.Point.x_)
  return x__;
}
inline void Point::set_x_(float value) {
  
  x__ = value;
  // @@protoc_insertion_point(field_set:x2.Point.x_)
}

// float y_ = 2;
inline void Point::clear_y_() {
  y__ = 0;
}
inline float Point::y_() const {
  // @@protoc_insertion_point(field_get:x2.Point.y_)
  return y__;
}
inline void Point::set_y_(float value) {
  
  y__ = value;
  // @@protoc_insertion_point(field_set:x2.Point.y_)
}

// float score_ = 3;
inline void Point::clear_score_() {
  score__ = 0;
}
inline float Point::score_() const {
  // @@protoc_insertion_point(field_get:x2.Point.score_)
  return score__;
}
inline void Point::set_score_(float value) {
  
  score__ = value;
  // @@protoc_insertion_point(field_set:x2.Point.score_)
}

// -------------------------------------------------------------------

// Points

// string type_ = 1;
inline void Points::clear_type_() {
  type__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Points::type_() const {
  // @@protoc_insertion_point(field_get:x2.Points.type_)
  return type__.GetNoArena();
}
inline void Points::set_type_(const ::std::string& value) {
  
  type__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:x2.Points.type_)
}
#if LANG_CXX11
inline void Points::set_type_(::std::string&& value) {
  
  type__.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:x2.Points.type_)
}
#endif
inline void Points::set_type_(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  type__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:x2.Points.type_)
}
inline void Points::set_type_(const char* value, size_t size) {
  
  type__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:x2.Points.type_)
}
inline ::std::string* Points::mutable_type_() {
  
  // @@protoc_insertion_point(field_mutable:x2.Points.type_)
  return type__.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Points::release_type_() {
  // @@protoc_insertion_point(field_release:x2.Points.type_)
  
  return type__.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Points::set_allocated_type_(::std::string* type_) {
  if (type_ != NULL) {
    
  } else {
    
  }
  type__.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type_);
  // @@protoc_insertion_point(field_set_allocated:x2.Points.type_)
}

// repeated .x2.Point points_ = 2;
inline int Points::points__size() const {
  return points__.size();
}
inline void Points::clear_points_() {
  points__.Clear();
}
inline ::x2::Point* Points::mutable_points_(int index) {
  // @@protoc_insertion_point(field_mutable:x2.Points.points_)
  return points__.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::x2::Point >*
Points::mutable_points_() {
  // @@protoc_insertion_point(field_mutable_list:x2.Points.points_)
  return &points__;
}
inline const ::x2::Point& Points::points_(int index) const {
  // @@protoc_insertion_point(field_get:x2.Points.points_)
  return points__.Get(index);
}
inline ::x2::Point* Points::add_points_() {
  // @@protoc_insertion_point(field_add:x2.Points.points_)
  return points__.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::x2::Point >&
Points::points_() const {
  // @@protoc_insertion_point(field_list:x2.Points.points_)
  return points__;
}

// -------------------------------------------------------------------

// Box

// string type_ = 1;
inline void Box::clear_type_() {
  type__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Box::type_() const {
  // @@protoc_insertion_point(field_get:x2.Box.type_)
  return type__.GetNoArena();
}
inline void Box::set_type_(const ::std::string& value) {
  
  type__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:x2.Box.type_)
}
#if LANG_CXX11
inline void Box::set_type_(::std::string&& value) {
  
  type__.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:x2.Box.type_)
}
#endif
inline void Box::set_type_(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  type__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:x2.Box.type_)
}
inline void Box::set_type_(const char* value, size_t size) {
  
  type__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:x2.Box.type_)
}
inline ::std::string* Box::mutable_type_() {
  
  // @@protoc_insertion_point(field_mutable:x2.Box.type_)
  return type__.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Box::release_type_() {
  // @@protoc_insertion_point(field_release:x2.Box.type_)
  
  return type__.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Box::set_allocated_type_(::std::string* type_) {
  if (type_ != NULL) {
    
  } else {
    
  }
  type__.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type_);
  // @@protoc_insertion_point(field_set_allocated:x2.Box.type_)
}

// .x2.Point top_left_ = 2;
inline bool Box::has_top_left_() const {
  return this != internal_default_instance() && top_left__ != NULL;
}
inline void Box::clear_top_left_() {
  if (GetArenaNoVirtual() == NULL && top_left__ != NULL) {
    delete top_left__;
  }
  top_left__ = NULL;
}
inline const ::x2::Point& Box::_internal_top_left_() const {
  return *top_left__;
}
inline const ::x2::Point& Box::top_left_() const {
  const ::x2::Point* p = top_left__;
  // @@protoc_insertion_point(field_get:x2.Box.top_left_)
  return p != NULL ? *p : *reinterpret_cast<const ::x2::Point*>(
      &::x2::_Point_default_instance_);
}
inline ::x2::Point* Box::release_top_left_() {
  // @@protoc_insertion_point(field_release:x2.Box.top_left_)
  
  ::x2::Point* temp = top_left__;
  top_left__ = NULL;
  return temp;
}
inline ::x2::Point* Box::mutable_top_left_() {
  
  if (top_left__ == NULL) {
    auto* p = CreateMaybeMessage<::x2::Point>(GetArenaNoVirtual());
    top_left__ = p;
  }
  // @@protoc_insertion_point(field_mutable:x2.Box.top_left_)
  return top_left__;
}
inline void Box::set_allocated_top_left_(::x2::Point* top_left_) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete top_left__;
  }
  if (top_left_) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      top_left_ = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, top_left_, submessage_arena);
    }
    
  } else {
    
  }
  top_left__ = top_left_;
  // @@protoc_insertion_point(field_set_allocated:x2.Box.top_left_)
}

// .x2.Point bottom_right_ = 3;
inline bool Box::has_bottom_right_() const {
  return this != internal_default_instance() && bottom_right__ != NULL;
}
inline void Box::clear_bottom_right_() {
  if (GetArenaNoVirtual() == NULL && bottom_right__ != NULL) {
    delete bottom_right__;
  }
  bottom_right__ = NULL;
}
inline const ::x2::Point& Box::_internal_bottom_right_() const {
  return *bottom_right__;
}
inline const ::x2::Point& Box::bottom_right_() const {
  const ::x2::Point* p = bottom_right__;
  // @@protoc_insertion_point(field_get:x2.Box.bottom_right_)
  return p != NULL ? *p : *reinterpret_cast<const ::x2::Point*>(
      &::x2::_Point_default_instance_);
}
inline ::x2::Point* Box::release_bottom_right_() {
  // @@protoc_insertion_point(field_release:x2.Box.bottom_right_)
  
  ::x2::Point* temp = bottom_right__;
  bottom_right__ = NULL;
  return temp;
}
inline ::x2::Point* Box::mutable_bottom_right_() {
  
  if (bottom_right__ == NULL) {
    auto* p = CreateMaybeMessage<::x2::Point>(GetArenaNoVirtual());
    bottom_right__ = p;
  }
  // @@protoc_insertion_point(field_mutable:x2.Box.bottom_right_)
  return bottom_right__;
}
inline void Box::set_allocated_bottom_right_(::x2::Point* bottom_right_) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete bottom_right__;
  }
  if (bottom_right_) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      bottom_right_ = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, bottom_right_, submessage_arena);
    }
    
  } else {
    
  }
  bottom_right__ = bottom_right_;
  // @@protoc_insertion_point(field_set_allocated:x2.Box.bottom_right_)
}

// -------------------------------------------------------------------

// Attributes

// string type_ = 1;
inline void Attributes::clear_type_() {
  type__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Attributes::type_() const {
  // @@protoc_insertion_point(field_get:x2.Attributes.type_)
  return type__.GetNoArena();
}
inline void Attributes::set_type_(const ::std::string& value) {
  
  type__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:x2.Attributes.type_)
}
#if LANG_CXX11
inline void Attributes::set_type_(::std::string&& value) {
  
  type__.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:x2.Attributes.type_)
}
#endif
inline void Attributes::set_type_(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  type__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:x2.Attributes.type_)
}
inline void Attributes::set_type_(const char* value, size_t size) {
  
  type__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:x2.Attributes.type_)
}
inline ::std::string* Attributes::mutable_type_() {
  
  // @@protoc_insertion_point(field_mutable:x2.Attributes.type_)
  return type__.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Attributes::release_type_() {
  // @@protoc_insertion_point(field_release:x2.Attributes.type_)
  
  return type__.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Attributes::set_allocated_type_(::std::string* type_) {
  if (type_ != NULL) {
    
  } else {
    
  }
  type__.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type_);
  // @@protoc_insertion_point(field_set_allocated:x2.Attributes.type_)
}

// float value_ = 2;
inline void Attributes::clear_value_() {
  value__ = 0;
}
inline float Attributes::value_() const {
  // @@protoc_insertion_point(field_get:x2.Attributes.value_)
  return value__;
}
inline void Attributes::set_value_(float value) {
  
  value__ = value;
  // @@protoc_insertion_point(field_set:x2.Attributes.value_)
}

// float score_ = 3;
inline void Attributes::clear_score_() {
  score__ = 0;
}
inline float Attributes::score_() const {
  // @@protoc_insertion_point(field_get:x2.Attributes.score_)
  return score__;
}
inline void Attributes::set_score_(float value) {
  
  score__ = value;
  // @@protoc_insertion_point(field_set:x2.Attributes.score_)
}

// -------------------------------------------------------------------

// Target

// string type_ = 1;
inline void Target::clear_type_() {
  type__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Target::type_() const {
  // @@protoc_insertion_point(field_get:x2.Target.type_)
  return type__.GetNoArena();
}
inline void Target::set_type_(const ::std::string& value) {
  
  type__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:x2.Target.type_)
}
#if LANG_CXX11
inline void Target::set_type_(::std::string&& value) {
  
  type__.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:x2.Target.type_)
}
#endif
inline void Target::set_type_(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  type__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:x2.Target.type_)
}
inline void Target::set_type_(const char* value, size_t size) {
  
  type__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:x2.Target.type_)
}
inline ::std::string* Target::mutable_type_() {
  
  // @@protoc_insertion_point(field_mutable:x2.Target.type_)
  return type__.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Target::release_type_() {
  // @@protoc_insertion_point(field_release:x2.Target.type_)
  
  return type__.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Target::set_allocated_type_(::std::string* type_) {
  if (type_ != NULL) {
    
  } else {
    
  }
  type__.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type_);
  // @@protoc_insertion_point(field_set_allocated:x2.Target.type_)
}

// uint64 track_id_ = 2;
inline void Target::clear_track_id_() {
  track_id__ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Target::track_id_() const {
  // @@protoc_insertion_point(field_get:x2.Target.track_id_)
  return track_id__;
}
inline void Target::set_track_id_(::google::protobuf::uint64 value) {
  
  track_id__ = value;
  // @@protoc_insertion_point(field_set:x2.Target.track_id_)
}

// repeated .x2.Box boxes_ = 3;
inline int Target::boxes__size() const {
  return boxes__.size();
}
inline void Target::clear_boxes_() {
  boxes__.Clear();
}
inline ::x2::Box* Target::mutable_boxes_(int index) {
  // @@protoc_insertion_point(field_mutable:x2.Target.boxes_)
  return boxes__.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::x2::Box >*
Target::mutable_boxes_() {
  // @@protoc_insertion_point(field_mutable_list:x2.Target.boxes_)
  return &boxes__;
}
inline const ::x2::Box& Target::boxes_(int index) const {
  // @@protoc_insertion_point(field_get:x2.Target.boxes_)
  return boxes__.Get(index);
}
inline ::x2::Box* Target::add_boxes_() {
  // @@protoc_insertion_point(field_add:x2.Target.boxes_)
  return boxes__.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::x2::Box >&
Target::boxes_() const {
  // @@protoc_insertion_point(field_list:x2.Target.boxes_)
  return boxes__;
}

// repeated .x2.Attributes attributes_ = 4;
inline int Target::attributes__size() const {
  return attributes__.size();
}
inline void Target::clear_attributes_() {
  attributes__.Clear();
}
inline ::x2::Attributes* Target::mutable_attributes_(int index) {
  // @@protoc_insertion_point(field_mutable:x2.Target.attributes_)
  return attributes__.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::x2::Attributes >*
Target::mutable_attributes_() {
  // @@protoc_insertion_point(field_mutable_list:x2.Target.attributes_)
  return &attributes__;
}
inline const ::x2::Attributes& Target::attributes_(int index) const {
  // @@protoc_insertion_point(field_get:x2.Target.attributes_)
  return attributes__.Get(index);
}
inline ::x2::Attributes* Target::add_attributes_() {
  // @@protoc_insertion_point(field_add:x2.Target.attributes_)
  return attributes__.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::x2::Attributes >&
Target::attributes_() const {
  // @@protoc_insertion_point(field_list:x2.Target.attributes_)
  return attributes__;
}

// repeated .x2.Points points_ = 5;
inline int Target::points__size() const {
  return points__.size();
}
inline void Target::clear_points_() {
  points__.Clear();
}
inline ::x2::Points* Target::mutable_points_(int index) {
  // @@protoc_insertion_point(field_mutable:x2.Target.points_)
  return points__.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::x2::Points >*
Target::mutable_points_() {
  // @@protoc_insertion_point(field_mutable_list:x2.Target.points_)
  return &points__;
}
inline const ::x2::Points& Target::points_(int index) const {
  // @@protoc_insertion_point(field_get:x2.Target.points_)
  return points__.Get(index);
}
inline ::x2::Points* Target::add_points_() {
  // @@protoc_insertion_point(field_add:x2.Target.points_)
  return points__.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::x2::Points >&
Target::points_() const {
  // @@protoc_insertion_point(field_list:x2.Target.points_)
  return points__;
}

// repeated .x2.FloatArray float_arrays_ = 6;
inline int Target::float_arrays__size() const {
  return float_arrays__.size();
}
inline void Target::clear_float_arrays_() {
  float_arrays__.Clear();
}
inline ::x2::FloatArray* Target::mutable_float_arrays_(int index) {
  // @@protoc_insertion_point(field_mutable:x2.Target.float_arrays_)
  return float_arrays__.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::x2::FloatArray >*
Target::mutable_float_arrays_() {
  // @@protoc_insertion_point(field_mutable_list:x2.Target.float_arrays_)
  return &float_arrays__;
}
inline const ::x2::FloatArray& Target::float_arrays_(int index) const {
  // @@protoc_insertion_point(field_get:x2.Target.float_arrays_)
  return float_arrays__.Get(index);
}
inline ::x2::FloatArray* Target::add_float_arrays_() {
  // @@protoc_insertion_point(field_add:x2.Target.float_arrays_)
  return float_arrays__.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::x2::FloatArray >&
Target::float_arrays_() const {
  // @@protoc_insertion_point(field_list:x2.Target.float_arrays_)
  return float_arrays__;
}

// repeated .x2.FloatMatrix float_matrixs_ = 7;
inline int Target::float_matrixs__size() const {
  return float_matrixs__.size();
}
inline void Target::clear_float_matrixs_() {
  float_matrixs__.Clear();
}
inline ::x2::FloatMatrix* Target::mutable_float_matrixs_(int index) {
  // @@protoc_insertion_point(field_mutable:x2.Target.float_matrixs_)
  return float_matrixs__.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::x2::FloatMatrix >*
Target::mutable_float_matrixs_() {
  // @@protoc_insertion_point(field_mutable_list:x2.Target.float_matrixs_)
  return &float_matrixs__;
}
inline const ::x2::FloatMatrix& Target::float_matrixs_(int index) const {
  // @@protoc_insertion_point(field_get:x2.Target.float_matrixs_)
  return float_matrixs__.Get(index);
}
inline ::x2::FloatMatrix* Target::add_float_matrixs_() {
  // @@protoc_insertion_point(field_add:x2.Target.float_matrixs_)
  return float_matrixs__.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::x2::FloatMatrix >&
Target::float_matrixs_() const {
  // @@protoc_insertion_point(field_list:x2.Target.float_matrixs_)
  return float_matrixs__;
}

// -------------------------------------------------------------------

// SmartFrameMessage

// fixed64 timestamp_ = 1;
inline void SmartFrameMessage::clear_timestamp_() {
  timestamp__ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 SmartFrameMessage::timestamp_() const {
  // @@protoc_insertion_point(field_get:x2.SmartFrameMessage.timestamp_)
  return timestamp__;
}
inline void SmartFrameMessage::set_timestamp_(::google::protobuf::uint64 value) {
  
  timestamp__ = value;
  // @@protoc_insertion_point(field_set:x2.SmartFrameMessage.timestamp_)
}

// uint32 error_code_ = 2;
inline void SmartFrameMessage::clear_error_code_() {
  error_code__ = 0u;
}
inline ::google::protobuf::uint32 SmartFrameMessage::error_code_() const {
  // @@protoc_insertion_point(field_get:x2.SmartFrameMessage.error_code_)
  return error_code__;
}
inline void SmartFrameMessage::set_error_code_(::google::protobuf::uint32 value) {
  
  error_code__ = value;
  // @@protoc_insertion_point(field_set:x2.SmartFrameMessage.error_code_)
}

// repeated .x2.Target targets_ = 3;
inline int SmartFrameMessage::targets__size() const {
  return targets__.size();
}
inline void SmartFrameMessage::clear_targets_() {
  targets__.Clear();
}
inline ::x2::Target* SmartFrameMessage::mutable_targets_(int index) {
  // @@protoc_insertion_point(field_mutable:x2.SmartFrameMessage.targets_)
  return targets__.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::x2::Target >*
SmartFrameMessage::mutable_targets_() {
  // @@protoc_insertion_point(field_mutable_list:x2.SmartFrameMessage.targets_)
  return &targets__;
}
inline const ::x2::Target& SmartFrameMessage::targets_(int index) const {
  // @@protoc_insertion_point(field_get:x2.SmartFrameMessage.targets_)
  return targets__.Get(index);
}
inline ::x2::Target* SmartFrameMessage::add_targets_() {
  // @@protoc_insertion_point(field_add:x2.SmartFrameMessage.targets_)
  return targets__.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::x2::Target >&
SmartFrameMessage::targets_() const {
  // @@protoc_insertion_point(field_list:x2.SmartFrameMessage.targets_)
  return targets__;
}

// -------------------------------------------------------------------

// DBResult

// string db_type_ = 1;
inline void DBResult::clear_db_type_() {
  db_type__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DBResult::db_type_() const {
  // @@protoc_insertion_point(field_get:x2.DBResult.db_type_)
  return db_type__.GetNoArena();
}
inline void DBResult::set_db_type_(const ::std::string& value) {
  
  db_type__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:x2.DBResult.db_type_)
}
#if LANG_CXX11
inline void DBResult::set_db_type_(::std::string&& value) {
  
  db_type__.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:x2.DBResult.db_type_)
}
#endif
inline void DBResult::set_db_type_(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  db_type__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:x2.DBResult.db_type_)
}
inline void DBResult::set_db_type_(const char* value, size_t size) {
  
  db_type__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:x2.DBResult.db_type_)
}
inline ::std::string* DBResult::mutable_db_type_() {
  
  // @@protoc_insertion_point(field_mutable:x2.DBResult.db_type_)
  return db_type__.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DBResult::release_db_type_() {
  // @@protoc_insertion_point(field_release:x2.DBResult.db_type_)
  
  return db_type__.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DBResult::set_allocated_db_type_(::std::string* db_type_) {
  if (db_type_ != NULL) {
    
  } else {
    
  }
  db_type__.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), db_type_);
  // @@protoc_insertion_point(field_set_allocated:x2.DBResult.db_type_)
}

// string match_id_ = 2;
inline void DBResult::clear_match_id_() {
  match_id__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DBResult::match_id_() const {
  // @@protoc_insertion_point(field_get:x2.DBResult.match_id_)
  return match_id__.GetNoArena();
}
inline void DBResult::set_match_id_(const ::std::string& value) {
  
  match_id__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:x2.DBResult.match_id_)
}
#if LANG_CXX11
inline void DBResult::set_match_id_(::std::string&& value) {
  
  match_id__.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:x2.DBResult.match_id_)
}
#endif
inline void DBResult::set_match_id_(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  match_id__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:x2.DBResult.match_id_)
}
inline void DBResult::set_match_id_(const char* value, size_t size) {
  
  match_id__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:x2.DBResult.match_id_)
}
inline ::std::string* DBResult::mutable_match_id_() {
  
  // @@protoc_insertion_point(field_mutable:x2.DBResult.match_id_)
  return match_id__.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DBResult::release_match_id_() {
  // @@protoc_insertion_point(field_release:x2.DBResult.match_id_)
  
  return match_id__.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DBResult::set_allocated_match_id_(::std::string* match_id_) {
  if (match_id_ != NULL) {
    
  } else {
    
  }
  match_id__.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), match_id_);
  // @@protoc_insertion_point(field_set_allocated:x2.DBResult.match_id_)
}

// float distance_ = 3;
inline void DBResult::clear_distance_() {
  distance__ = 0;
}
inline float DBResult::distance_() const {
  // @@protoc_insertion_point(field_get:x2.DBResult.distance_)
  return distance__;
}
inline void DBResult::set_distance_(float value) {
  
  distance__ = value;
  // @@protoc_insertion_point(field_set:x2.DBResult.distance_)
}

// float similarity_ = 4;
inline void DBResult::clear_similarity_() {
  similarity__ = 0;
}
inline float DBResult::similarity_() const {
  // @@protoc_insertion_point(field_get:x2.DBResult.similarity_)
  return similarity__;
}
inline void DBResult::set_similarity_(float value) {
  
  similarity__ = value;
  // @@protoc_insertion_point(field_set:x2.DBResult.similarity_)
}

// -------------------------------------------------------------------

// Image

// bytes buf_ = 1;
inline void Image::clear_buf_() {
  buf__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Image::buf_() const {
  // @@protoc_insertion_point(field_get:x2.Image.buf_)
  return buf__.GetNoArena();
}
inline void Image::set_buf_(const ::std::string& value) {
  
  buf__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:x2.Image.buf_)
}
#if LANG_CXX11
inline void Image::set_buf_(::std::string&& value) {
  
  buf__.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:x2.Image.buf_)
}
#endif
inline void Image::set_buf_(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  buf__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:x2.Image.buf_)
}
inline void Image::set_buf_(const void* value, size_t size) {
  
  buf__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:x2.Image.buf_)
}
inline ::std::string* Image::mutable_buf_() {
  
  // @@protoc_insertion_point(field_mutable:x2.Image.buf_)
  return buf__.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Image::release_buf_() {
  // @@protoc_insertion_point(field_release:x2.Image.buf_)
  
  return buf__.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Image::set_allocated_buf_(::std::string* buf_) {
  if (buf_ != NULL) {
    
  } else {
    
  }
  buf__.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), buf_);
  // @@protoc_insertion_point(field_set_allocated:x2.Image.buf_)
}

// string type_ = 2;
inline void Image::clear_type_() {
  type__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Image::type_() const {
  // @@protoc_insertion_point(field_get:x2.Image.type_)
  return type__.GetNoArena();
}
inline void Image::set_type_(const ::std::string& value) {
  
  type__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:x2.Image.type_)
}
#if LANG_CXX11
inline void Image::set_type_(::std::string&& value) {
  
  type__.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:x2.Image.type_)
}
#endif
inline void Image::set_type_(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  type__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:x2.Image.type_)
}
inline void Image::set_type_(const char* value, size_t size) {
  
  type__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:x2.Image.type_)
}
inline ::std::string* Image::mutable_type_() {
  
  // @@protoc_insertion_point(field_mutable:x2.Image.type_)
  return type__.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Image::release_type_() {
  // @@protoc_insertion_point(field_release:x2.Image.type_)
  
  return type__.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Image::set_allocated_type_(::std::string* type_) {
  if (type_ != NULL) {
    
  } else {
    
  }
  type__.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type_);
  // @@protoc_insertion_point(field_set_allocated:x2.Image.type_)
}

// uint32 width_ = 3;
inline void Image::clear_width_() {
  width__ = 0u;
}
inline ::google::protobuf::uint32 Image::width_() const {
  // @@protoc_insertion_point(field_get:x2.Image.width_)
  return width__;
}
inline void Image::set_width_(::google::protobuf::uint32 value) {
  
  width__ = value;
  // @@protoc_insertion_point(field_set:x2.Image.width_)
}

// uint32 height_ = 4;
inline void Image::clear_height_() {
  height__ = 0u;
}
inline ::google::protobuf::uint32 Image::height_() const {
  // @@protoc_insertion_point(field_get:x2.Image.height_)
  return height__;
}
inline void Image::set_height_(::google::protobuf::uint32 value) {
  
  height__ = value;
  // @@protoc_insertion_point(field_set:x2.Image.height_)
}

// -------------------------------------------------------------------

// CharArray

// string type_ = 1;
inline void CharArray::clear_type_() {
  type__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CharArray::type_() const {
  // @@protoc_insertion_point(field_get:x2.CharArray.type_)
  return type__.GetNoArena();
}
inline void CharArray::set_type_(const ::std::string& value) {
  
  type__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:x2.CharArray.type_)
}
#if LANG_CXX11
inline void CharArray::set_type_(::std::string&& value) {
  
  type__.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:x2.CharArray.type_)
}
#endif
inline void CharArray::set_type_(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  type__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:x2.CharArray.type_)
}
inline void CharArray::set_type_(const char* value, size_t size) {
  
  type__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:x2.CharArray.type_)
}
inline ::std::string* CharArray::mutable_type_() {
  
  // @@protoc_insertion_point(field_mutable:x2.CharArray.type_)
  return type__.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CharArray::release_type_() {
  // @@protoc_insertion_point(field_release:x2.CharArray.type_)
  
  return type__.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CharArray::set_allocated_type_(::std::string* type_) {
  if (type_ != NULL) {
    
  } else {
    
  }
  type__.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type_);
  // @@protoc_insertion_point(field_set_allocated:x2.CharArray.type_)
}

// bytes array_ = 2;
inline void CharArray::clear_array_() {
  array__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CharArray::array_() const {
  // @@protoc_insertion_point(field_get:x2.CharArray.array_)
  return array__.GetNoArena();
}
inline void CharArray::set_array_(const ::std::string& value) {
  
  array__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:x2.CharArray.array_)
}
#if LANG_CXX11
inline void CharArray::set_array_(::std::string&& value) {
  
  array__.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:x2.CharArray.array_)
}
#endif
inline void CharArray::set_array_(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  array__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:x2.CharArray.array_)
}
inline void CharArray::set_array_(const void* value, size_t size) {
  
  array__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:x2.CharArray.array_)
}
inline ::std::string* CharArray::mutable_array_() {
  
  // @@protoc_insertion_point(field_mutable:x2.CharArray.array_)
  return array__.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CharArray::release_array_() {
  // @@protoc_insertion_point(field_release:x2.CharArray.array_)
  
  return array__.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CharArray::set_allocated_array_(::std::string* array_) {
  if (array_ != NULL) {
    
  } else {
    
  }
  array__.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), array_);
  // @@protoc_insertion_point(field_set_allocated:x2.CharArray.array_)
}

// -------------------------------------------------------------------

// Capture

// string type_ = 1;
inline void Capture::clear_type_() {
  type__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Capture::type_() const {
  // @@protoc_insertion_point(field_get:x2.Capture.type_)
  return type__.GetNoArena();
}
inline void Capture::set_type_(const ::std::string& value) {
  
  type__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:x2.Capture.type_)
}
#if LANG_CXX11
inline void Capture::set_type_(::std::string&& value) {
  
  type__.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:x2.Capture.type_)
}
#endif
inline void Capture::set_type_(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  type__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:x2.Capture.type_)
}
inline void Capture::set_type_(const char* value, size_t size) {
  
  type__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:x2.Capture.type_)
}
inline ::std::string* Capture::mutable_type_() {
  
  // @@protoc_insertion_point(field_mutable:x2.Capture.type_)
  return type__.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Capture::release_type_() {
  // @@protoc_insertion_point(field_release:x2.Capture.type_)
  
  return type__.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Capture::set_allocated_type_(::std::string* type_) {
  if (type_ != NULL) {
    
  } else {
    
  }
  type__.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type_);
  // @@protoc_insertion_point(field_set_allocated:x2.Capture.type_)
}

// fixed64 timestamp_ = 2;
inline void Capture::clear_timestamp_() {
  timestamp__ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Capture::timestamp_() const {
  // @@protoc_insertion_point(field_get:x2.Capture.timestamp_)
  return timestamp__;
}
inline void Capture::set_timestamp_(::google::protobuf::uint64 value) {
  
  timestamp__ = value;
  // @@protoc_insertion_point(field_set:x2.Capture.timestamp_)
}

// .x2.Image img_ = 3;
inline bool Capture::has_img_() const {
  return this != internal_default_instance() && img__ != NULL;
}
inline void Capture::clear_img_() {
  if (GetArenaNoVirtual() == NULL && img__ != NULL) {
    delete img__;
  }
  img__ = NULL;
}
inline const ::x2::Image& Capture::_internal_img_() const {
  return *img__;
}
inline const ::x2::Image& Capture::img_() const {
  const ::x2::Image* p = img__;
  // @@protoc_insertion_point(field_get:x2.Capture.img_)
  return p != NULL ? *p : *reinterpret_cast<const ::x2::Image*>(
      &::x2::_Image_default_instance_);
}
inline ::x2::Image* Capture::release_img_() {
  // @@protoc_insertion_point(field_release:x2.Capture.img_)
  
  ::x2::Image* temp = img__;
  img__ = NULL;
  return temp;
}
inline ::x2::Image* Capture::mutable_img_() {
  
  if (img__ == NULL) {
    auto* p = CreateMaybeMessage<::x2::Image>(GetArenaNoVirtual());
    img__ = p;
  }
  // @@protoc_insertion_point(field_mutable:x2.Capture.img_)
  return img__;
}
inline void Capture::set_allocated_img_(::x2::Image* img_) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete img__;
  }
  if (img_) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      img_ = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, img_, submessage_arena);
    }
    
  } else {
    
  }
  img__ = img_;
  // @@protoc_insertion_point(field_set_allocated:x2.Capture.img_)
}

// repeated .x2.Box boxes_ = 4;
inline int Capture::boxes__size() const {
  return boxes__.size();
}
inline void Capture::clear_boxes_() {
  boxes__.Clear();
}
inline ::x2::Box* Capture::mutable_boxes_(int index) {
  // @@protoc_insertion_point(field_mutable:x2.Capture.boxes_)
  return boxes__.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::x2::Box >*
Capture::mutable_boxes_() {
  // @@protoc_insertion_point(field_mutable_list:x2.Capture.boxes_)
  return &boxes__;
}
inline const ::x2::Box& Capture::boxes_(int index) const {
  // @@protoc_insertion_point(field_get:x2.Capture.boxes_)
  return boxes__.Get(index);
}
inline ::x2::Box* Capture::add_boxes_() {
  // @@protoc_insertion_point(field_add:x2.Capture.boxes_)
  return boxes__.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::x2::Box >&
Capture::boxes_() const {
  // @@protoc_insertion_point(field_list:x2.Capture.boxes_)
  return boxes__;
}

// repeated .x2.Attributes attributes_ = 5;
inline int Capture::attributes__size() const {
  return attributes__.size();
}
inline void Capture::clear_attributes_() {
  attributes__.Clear();
}
inline ::x2::Attributes* Capture::mutable_attributes_(int index) {
  // @@protoc_insertion_point(field_mutable:x2.Capture.attributes_)
  return attributes__.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::x2::Attributes >*
Capture::mutable_attributes_() {
  // @@protoc_insertion_point(field_mutable_list:x2.Capture.attributes_)
  return &attributes__;
}
inline const ::x2::Attributes& Capture::attributes_(int index) const {
  // @@protoc_insertion_point(field_get:x2.Capture.attributes_)
  return attributes__.Get(index);
}
inline ::x2::Attributes* Capture::add_attributes_() {
  // @@protoc_insertion_point(field_add:x2.Capture.attributes_)
  return attributes__.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::x2::Attributes >&
Capture::attributes_() const {
  // @@protoc_insertion_point(field_list:x2.Capture.attributes_)
  return attributes__;
}

// repeated .x2.Points points_ = 6;
inline int Capture::points__size() const {
  return points__.size();
}
inline void Capture::clear_points_() {
  points__.Clear();
}
inline ::x2::Points* Capture::mutable_points_(int index) {
  // @@protoc_insertion_point(field_mutable:x2.Capture.points_)
  return points__.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::x2::Points >*
Capture::mutable_points_() {
  // @@protoc_insertion_point(field_mutable_list:x2.Capture.points_)
  return &points__;
}
inline const ::x2::Points& Capture::points_(int index) const {
  // @@protoc_insertion_point(field_get:x2.Capture.points_)
  return points__.Get(index);
}
inline ::x2::Points* Capture::add_points_() {
  // @@protoc_insertion_point(field_add:x2.Capture.points_)
  return points__.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::x2::Points >&
Capture::points_() const {
  // @@protoc_insertion_point(field_list:x2.Capture.points_)
  return points__;
}

// repeated .x2.FloatArray float_arrays_ = 7;
inline int Capture::float_arrays__size() const {
  return float_arrays__.size();
}
inline void Capture::clear_float_arrays_() {
  float_arrays__.Clear();
}
inline ::x2::FloatArray* Capture::mutable_float_arrays_(int index) {
  // @@protoc_insertion_point(field_mutable:x2.Capture.float_arrays_)
  return float_arrays__.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::x2::FloatArray >*
Capture::mutable_float_arrays_() {
  // @@protoc_insertion_point(field_mutable_list:x2.Capture.float_arrays_)
  return &float_arrays__;
}
inline const ::x2::FloatArray& Capture::float_arrays_(int index) const {
  // @@protoc_insertion_point(field_get:x2.Capture.float_arrays_)
  return float_arrays__.Get(index);
}
inline ::x2::FloatArray* Capture::add_float_arrays_() {
  // @@protoc_insertion_point(field_add:x2.Capture.float_arrays_)
  return float_arrays__.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::x2::FloatArray >&
Capture::float_arrays_() const {
  // @@protoc_insertion_point(field_list:x2.Capture.float_arrays_)
  return float_arrays__;
}

// repeated .x2.CharArray char_arrays_ = 8;
inline int Capture::char_arrays__size() const {
  return char_arrays__.size();
}
inline void Capture::clear_char_arrays_() {
  char_arrays__.Clear();
}
inline ::x2::CharArray* Capture::mutable_char_arrays_(int index) {
  // @@protoc_insertion_point(field_mutable:x2.Capture.char_arrays_)
  return char_arrays__.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::x2::CharArray >*
Capture::mutable_char_arrays_() {
  // @@protoc_insertion_point(field_mutable_list:x2.Capture.char_arrays_)
  return &char_arrays__;
}
inline const ::x2::CharArray& Capture::char_arrays_(int index) const {
  // @@protoc_insertion_point(field_get:x2.Capture.char_arrays_)
  return char_arrays__.Get(index);
}
inline ::x2::CharArray* Capture::add_char_arrays_() {
  // @@protoc_insertion_point(field_add:x2.Capture.char_arrays_)
  return char_arrays__.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::x2::CharArray >&
Capture::char_arrays_() const {
  // @@protoc_insertion_point(field_list:x2.Capture.char_arrays_)
  return char_arrays__;
}

// -------------------------------------------------------------------

// CaptureTarget

// string type_ = 1;
inline void CaptureTarget::clear_type_() {
  type__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CaptureTarget::type_() const {
  // @@protoc_insertion_point(field_get:x2.CaptureTarget.type_)
  return type__.GetNoArena();
}
inline void CaptureTarget::set_type_(const ::std::string& value) {
  
  type__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:x2.CaptureTarget.type_)
}
#if LANG_CXX11
inline void CaptureTarget::set_type_(::std::string&& value) {
  
  type__.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:x2.CaptureTarget.type_)
}
#endif
inline void CaptureTarget::set_type_(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  type__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:x2.CaptureTarget.type_)
}
inline void CaptureTarget::set_type_(const char* value, size_t size) {
  
  type__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:x2.CaptureTarget.type_)
}
inline ::std::string* CaptureTarget::mutable_type_() {
  
  // @@protoc_insertion_point(field_mutable:x2.CaptureTarget.type_)
  return type__.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CaptureTarget::release_type_() {
  // @@protoc_insertion_point(field_release:x2.CaptureTarget.type_)
  
  return type__.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CaptureTarget::set_allocated_type_(::std::string* type_) {
  if (type_ != NULL) {
    
  } else {
    
  }
  type__.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type_);
  // @@protoc_insertion_point(field_set_allocated:x2.CaptureTarget.type_)
}

// uint64 track_id_ = 2;
inline void CaptureTarget::clear_track_id_() {
  track_id__ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 CaptureTarget::track_id_() const {
  // @@protoc_insertion_point(field_get:x2.CaptureTarget.track_id_)
  return track_id__;
}
inline void CaptureTarget::set_track_id_(::google::protobuf::uint64 value) {
  
  track_id__ = value;
  // @@protoc_insertion_point(field_set:x2.CaptureTarget.track_id_)
}

// repeated .x2.Capture captures_ = 3;
inline int CaptureTarget::captures__size() const {
  return captures__.size();
}
inline void CaptureTarget::clear_captures_() {
  captures__.Clear();
}
inline ::x2::Capture* CaptureTarget::mutable_captures_(int index) {
  // @@protoc_insertion_point(field_mutable:x2.CaptureTarget.captures_)
  return captures__.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::x2::Capture >*
CaptureTarget::mutable_captures_() {
  // @@protoc_insertion_point(field_mutable_list:x2.CaptureTarget.captures_)
  return &captures__;
}
inline const ::x2::Capture& CaptureTarget::captures_(int index) const {
  // @@protoc_insertion_point(field_get:x2.CaptureTarget.captures_)
  return captures__.Get(index);
}
inline ::x2::Capture* CaptureTarget::add_captures_() {
  // @@protoc_insertion_point(field_add:x2.CaptureTarget.captures_)
  return captures__.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::x2::Capture >&
CaptureTarget::captures_() const {
  // @@protoc_insertion_point(field_list:x2.CaptureTarget.captures_)
  return captures__;
}

// repeated .x2.DBResult db_results_ = 4;
inline int CaptureTarget::db_results__size() const {
  return db_results__.size();
}
inline void CaptureTarget::clear_db_results_() {
  db_results__.Clear();
}
inline ::x2::DBResult* CaptureTarget::mutable_db_results_(int index) {
  // @@protoc_insertion_point(field_mutable:x2.CaptureTarget.db_results_)
  return db_results__.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::x2::DBResult >*
CaptureTarget::mutable_db_results_() {
  // @@protoc_insertion_point(field_mutable_list:x2.CaptureTarget.db_results_)
  return &db_results__;
}
inline const ::x2::DBResult& CaptureTarget::db_results_(int index) const {
  // @@protoc_insertion_point(field_get:x2.CaptureTarget.db_results_)
  return db_results__.Get(index);
}
inline ::x2::DBResult* CaptureTarget::add_db_results_() {
  // @@protoc_insertion_point(field_add:x2.CaptureTarget.db_results_)
  return db_results__.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::x2::DBResult >&
CaptureTarget::db_results_() const {
  // @@protoc_insertion_point(field_list:x2.CaptureTarget.db_results_)
  return db_results__;
}

// -------------------------------------------------------------------

// CaptureFrameMessage

// repeated .x2.CaptureTarget targets_ = 1;
inline int CaptureFrameMessage::targets__size() const {
  return targets__.size();
}
inline void CaptureFrameMessage::clear_targets_() {
  targets__.Clear();
}
inline ::x2::CaptureTarget* CaptureFrameMessage::mutable_targets_(int index) {
  // @@protoc_insertion_point(field_mutable:x2.CaptureFrameMessage.targets_)
  return targets__.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::x2::CaptureTarget >*
CaptureFrameMessage::mutable_targets_() {
  // @@protoc_insertion_point(field_mutable_list:x2.CaptureFrameMessage.targets_)
  return &targets__;
}
inline const ::x2::CaptureTarget& CaptureFrameMessage::targets_(int index) const {
  // @@protoc_insertion_point(field_get:x2.CaptureFrameMessage.targets_)
  return targets__.Get(index);
}
inline ::x2::CaptureTarget* CaptureFrameMessage::add_targets_() {
  // @@protoc_insertion_point(field_add:x2.CaptureFrameMessage.targets_)
  return targets__.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::x2::CaptureTarget >&
CaptureFrameMessage::targets_() const {
  // @@protoc_insertion_point(field_list:x2.CaptureFrameMessage.targets_)
  return targets__;
}

// -------------------------------------------------------------------

// FrameMessage

// .x2.SmartFrameMessage smart_msg_ = 1;
inline bool FrameMessage::has_smart_msg_() const {
  return this != internal_default_instance() && smart_msg__ != NULL;
}
inline void FrameMessage::clear_smart_msg_() {
  if (GetArenaNoVirtual() == NULL && smart_msg__ != NULL) {
    delete smart_msg__;
  }
  smart_msg__ = NULL;
}
inline const ::x2::SmartFrameMessage& FrameMessage::_internal_smart_msg_() const {
  return *smart_msg__;
}
inline const ::x2::SmartFrameMessage& FrameMessage::smart_msg_() const {
  const ::x2::SmartFrameMessage* p = smart_msg__;
  // @@protoc_insertion_point(field_get:x2.FrameMessage.smart_msg_)
  return p != NULL ? *p : *reinterpret_cast<const ::x2::SmartFrameMessage*>(
      &::x2::_SmartFrameMessage_default_instance_);
}
inline ::x2::SmartFrameMessage* FrameMessage::release_smart_msg_() {
  // @@protoc_insertion_point(field_release:x2.FrameMessage.smart_msg_)
  
  ::x2::SmartFrameMessage* temp = smart_msg__;
  smart_msg__ = NULL;
  return temp;
}
inline ::x2::SmartFrameMessage* FrameMessage::mutable_smart_msg_() {
  
  if (smart_msg__ == NULL) {
    auto* p = CreateMaybeMessage<::x2::SmartFrameMessage>(GetArenaNoVirtual());
    smart_msg__ = p;
  }
  // @@protoc_insertion_point(field_mutable:x2.FrameMessage.smart_msg_)
  return smart_msg__;
}
inline void FrameMessage::set_allocated_smart_msg_(::x2::SmartFrameMessage* smart_msg_) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete smart_msg__;
  }
  if (smart_msg_) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      smart_msg_ = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, smart_msg_, submessage_arena);
    }
    
  } else {
    
  }
  smart_msg__ = smart_msg_;
  // @@protoc_insertion_point(field_set_allocated:x2.FrameMessage.smart_msg_)
}

// .x2.CaptureFrameMessage capture_msg_ = 2;
inline bool FrameMessage::has_capture_msg_() const {
  return this != internal_default_instance() && capture_msg__ != NULL;
}
inline void FrameMessage::clear_capture_msg_() {
  if (GetArenaNoVirtual() == NULL && capture_msg__ != NULL) {
    delete capture_msg__;
  }
  capture_msg__ = NULL;
}
inline const ::x2::CaptureFrameMessage& FrameMessage::_internal_capture_msg_() const {
  return *capture_msg__;
}
inline const ::x2::CaptureFrameMessage& FrameMessage::capture_msg_() const {
  const ::x2::CaptureFrameMessage* p = capture_msg__;
  // @@protoc_insertion_point(field_get:x2.FrameMessage.capture_msg_)
  return p != NULL ? *p : *reinterpret_cast<const ::x2::CaptureFrameMessage*>(
      &::x2::_CaptureFrameMessage_default_instance_);
}
inline ::x2::CaptureFrameMessage* FrameMessage::release_capture_msg_() {
  // @@protoc_insertion_point(field_release:x2.FrameMessage.capture_msg_)
  
  ::x2::CaptureFrameMessage* temp = capture_msg__;
  capture_msg__ = NULL;
  return temp;
}
inline ::x2::CaptureFrameMessage* FrameMessage::mutable_capture_msg_() {
  
  if (capture_msg__ == NULL) {
    auto* p = CreateMaybeMessage<::x2::CaptureFrameMessage>(GetArenaNoVirtual());
    capture_msg__ = p;
  }
  // @@protoc_insertion_point(field_mutable:x2.FrameMessage.capture_msg_)
  return capture_msg__;
}
inline void FrameMessage::set_allocated_capture_msg_(::x2::CaptureFrameMessage* capture_msg_) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete capture_msg__;
  }
  if (capture_msg_) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      capture_msg_ = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, capture_msg_, submessage_arena);
    }
    
  } else {
    
  }
  capture_msg__ = capture_msg_;
  // @@protoc_insertion_point(field_set_allocated:x2.FrameMessage.capture_msg_)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace x2

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_x2_2eproto
