// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pack.proto

#ifndef PROTOBUF_INCLUDED_pack_2eproto
#define PROTOBUF_INCLUDED_pack_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_pack_2eproto 

namespace protobuf_pack_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[4];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
}  // namespace protobuf_pack_2eproto
namespace pack {
class Addition;
class AdditionDefaultTypeInternal;
extern AdditionDefaultTypeInternal _Addition_default_instance_;
class Check;
class CheckDefaultTypeInternal;
extern CheckDefaultTypeInternal _Check_default_instance_;
class Frame;
class FrameDefaultTypeInternal;
extern FrameDefaultTypeInternal _Frame_default_instance_;
class MessagePack;
class MessagePackDefaultTypeInternal;
extern MessagePackDefaultTypeInternal _MessagePack_default_instance_;
}  // namespace pack
namespace google {
namespace protobuf {
template<> ::pack::Addition* Arena::CreateMaybeMessage<::pack::Addition>(Arena*);
template<> ::pack::Check* Arena::CreateMaybeMessage<::pack::Check>(Arena*);
template<> ::pack::Frame* Arena::CreateMaybeMessage<::pack::Frame>(Arena*);
template<> ::pack::MessagePack* Arena::CreateMaybeMessage<::pack::MessagePack>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace pack {

enum Frame_FrameType {
  Frame_FrameType_Unkown = 0,
  Frame_FrameType_SmartFrame = 1,
  Frame_FrameType_DropFrame = 2,
  Frame_FrameType_ErrorFrame = 3,
  Frame_FrameType_Frame_FrameType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Frame_FrameType_Frame_FrameType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Frame_FrameType_IsValid(int value);
const Frame_FrameType Frame_FrameType_FrameType_MIN = Frame_FrameType_Unkown;
const Frame_FrameType Frame_FrameType_FrameType_MAX = Frame_FrameType_ErrorFrame;
const int Frame_FrameType_FrameType_ARRAYSIZE = Frame_FrameType_FrameType_MAX + 1;

enum MessagePack_Flow {
  MessagePack_Flow_Unknown = 0,
  MessagePack_Flow_AP2CP = 1,
  MessagePack_Flow_CP2AP = 2,
  MessagePack_Flow_MessagePack_Flow_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  MessagePack_Flow_MessagePack_Flow_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool MessagePack_Flow_IsValid(int value);
const MessagePack_Flow MessagePack_Flow_Flow_MIN = MessagePack_Flow_Unknown;
const MessagePack_Flow MessagePack_Flow_Flow_MAX = MessagePack_Flow_CP2AP;
const int MessagePack_Flow_Flow_ARRAYSIZE = MessagePack_Flow_Flow_MAX + 1;

enum MessagePack_Type {
  MessagePack_Type_kUnknown = 0,
  MessagePack_Type_kXPlugin = 1,
  MessagePack_Type_kXConfig = 2,
  MessagePack_Type_MessagePack_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  MessagePack_Type_MessagePack_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool MessagePack_Type_IsValid(int value);
const MessagePack_Type MessagePack_Type_Type_MIN = MessagePack_Type_kUnknown;
const MessagePack_Type MessagePack_Type_Type_MAX = MessagePack_Type_kXConfig;
const int MessagePack_Type_Type_ARRAYSIZE = MessagePack_Type_Type_MAX + 1;

// ===================================================================

class Frame : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:pack.Frame) */ {
 public:
  Frame();
  virtual ~Frame();

  Frame(const Frame& from);

  inline Frame& operator=(const Frame& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Frame(Frame&& from) noexcept
    : Frame() {
    *this = ::std::move(from);
  }

  inline Frame& operator=(Frame&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const Frame& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Frame* internal_default_instance() {
    return reinterpret_cast<const Frame*>(
               &_Frame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Frame* other);
  friend void swap(Frame& a, Frame& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Frame* New() const final {
    return CreateMaybeMessage<Frame>(NULL);
  }

  Frame* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Frame>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const Frame& from);
  void MergeFrom(const Frame& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Frame* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef Frame_FrameType FrameType;
  static const FrameType Unkown =
    Frame_FrameType_Unkown;
  static const FrameType SmartFrame =
    Frame_FrameType_SmartFrame;
  static const FrameType DropFrame =
    Frame_FrameType_DropFrame;
  static const FrameType ErrorFrame =
    Frame_FrameType_ErrorFrame;
  static inline bool FrameType_IsValid(int value) {
    return Frame_FrameType_IsValid(value);
  }
  static const FrameType FrameType_MIN =
    Frame_FrameType_FrameType_MIN;
  static const FrameType FrameType_MAX =
    Frame_FrameType_FrameType_MAX;
  static const int FrameType_ARRAYSIZE =
    Frame_FrameType_FrameType_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // uint64 sequence_id_ = 1;
  void clear_sequence_id_();
  static const int kSequenceIdFieldNumber = 1;
  ::google::protobuf::uint64 sequence_id_() const;
  void set_sequence_id_(::google::protobuf::uint64 value);

  // uint64 timestamp_ = 2;
  void clear_timestamp_();
  static const int kTimestampFieldNumber = 2;
  ::google::protobuf::uint64 timestamp_() const;
  void set_timestamp_(::google::protobuf::uint64 value);

  // .pack.Frame.FrameType frame_type_ = 3;
  void clear_frame_type_();
  static const int kFrameTypeFieldNumber = 3;
  ::pack::Frame_FrameType frame_type_() const;
  void set_frame_type_(::pack::Frame_FrameType value);

  // @@protoc_insertion_point(class_scope:pack.Frame)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::uint64 sequence_id__;
  ::google::protobuf::uint64 timestamp__;
  int frame_type__;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_pack_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Check : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:pack.Check) */ {
 public:
  Check();
  virtual ~Check();

  Check(const Check& from);

  inline Check& operator=(const Check& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Check(Check&& from) noexcept
    : Check() {
    *this = ::std::move(from);
  }

  inline Check& operator=(Check&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const Check& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Check* internal_default_instance() {
    return reinterpret_cast<const Check*>(
               &_Check_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Check* other);
  friend void swap(Check& a, Check& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Check* New() const final {
    return CreateMaybeMessage<Check>(NULL);
  }

  Check* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Check>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const Check& from);
  void MergeFrom(const Check& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Check* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes md5sum = 1;
  int md5sum_size() const;
  void clear_md5sum();
  static const int kMd5SumFieldNumber = 1;
  const ::std::string& md5sum(int index) const;
  ::std::string* mutable_md5sum(int index);
  void set_md5sum(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_md5sum(int index, ::std::string&& value);
  #endif
  void set_md5sum(int index, const char* value);
  void set_md5sum(int index, const void* value, size_t size);
  ::std::string* add_md5sum();
  void add_md5sum(const ::std::string& value);
  #if LANG_CXX11
  void add_md5sum(::std::string&& value);
  #endif
  void add_md5sum(const char* value);
  void add_md5sum(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& md5sum() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_md5sum();

  // @@protoc_insertion_point(class_scope:pack.Check)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> md5sum_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_pack_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Addition : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:pack.Addition) */ {
 public:
  Addition();
  virtual ~Addition();

  Addition(const Addition& from);

  inline Addition& operator=(const Addition& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Addition(Addition&& from) noexcept
    : Addition() {
    *this = ::std::move(from);
  }

  inline Addition& operator=(Addition&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const Addition& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Addition* internal_default_instance() {
    return reinterpret_cast<const Addition*>(
               &_Addition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Addition* other);
  friend void swap(Addition& a, Addition& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Addition* New() const final {
    return CreateMaybeMessage<Addition>(NULL);
  }

  Addition* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Addition>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const Addition& from);
  void MergeFrom(const Addition& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Addition* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .pack.Check check_ = 1;
  bool has_check_() const;
  void clear_check_();
  static const int kCheckFieldNumber = 1;
  private:
  const ::pack::Check& _internal_check_() const;
  public:
  const ::pack::Check& check_() const;
  ::pack::Check* release_check_();
  ::pack::Check* mutable_check_();
  void set_allocated_check_(::pack::Check* check_);

  // .pack.Frame frame_ = 2;
  bool has_frame_() const;
  void clear_frame_();
  static const int kFrameFieldNumber = 2;
  private:
  const ::pack::Frame& _internal_frame_() const;
  public:
  const ::pack::Frame& frame_() const;
  ::pack::Frame* release_frame_();
  ::pack::Frame* mutable_frame_();
  void set_allocated_frame_(::pack::Frame* frame_);

  // @@protoc_insertion_point(class_scope:pack.Addition)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::pack::Check* check__;
  ::pack::Frame* frame__;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_pack_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MessagePack : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:pack.MessagePack) */ {
 public:
  MessagePack();
  virtual ~MessagePack();

  MessagePack(const MessagePack& from);

  inline MessagePack& operator=(const MessagePack& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MessagePack(MessagePack&& from) noexcept
    : MessagePack() {
    *this = ::std::move(from);
  }

  inline MessagePack& operator=(MessagePack&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const MessagePack& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MessagePack* internal_default_instance() {
    return reinterpret_cast<const MessagePack*>(
               &_MessagePack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(MessagePack* other);
  friend void swap(MessagePack& a, MessagePack& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MessagePack* New() const final {
    return CreateMaybeMessage<MessagePack>(NULL);
  }

  MessagePack* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MessagePack>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const MessagePack& from);
  void MergeFrom(const MessagePack& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MessagePack* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef MessagePack_Flow Flow;
  static const Flow Unknown =
    MessagePack_Flow_Unknown;
  static const Flow AP2CP =
    MessagePack_Flow_AP2CP;
  static const Flow CP2AP =
    MessagePack_Flow_CP2AP;
  static inline bool Flow_IsValid(int value) {
    return MessagePack_Flow_IsValid(value);
  }
  static const Flow Flow_MIN =
    MessagePack_Flow_Flow_MIN;
  static const Flow Flow_MAX =
    MessagePack_Flow_Flow_MAX;
  static const int Flow_ARRAYSIZE =
    MessagePack_Flow_Flow_ARRAYSIZE;

  typedef MessagePack_Type Type;
  static const Type kUnknown =
    MessagePack_Type_kUnknown;
  static const Type kXPlugin =
    MessagePack_Type_kXPlugin;
  static const Type kXConfig =
    MessagePack_Type_kXConfig;
  static inline bool Type_IsValid(int value) {
    return MessagePack_Type_IsValid(value);
  }
  static const Type Type_MIN =
    MessagePack_Type_Type_MIN;
  static const Type Type_MAX =
    MessagePack_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    MessagePack_Type_Type_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // bytes content_ = 4;
  void clear_content_();
  static const int kContentFieldNumber = 4;
  const ::std::string& content_() const;
  void set_content_(const ::std::string& value);
  #if LANG_CXX11
  void set_content_(::std::string&& value);
  #endif
  void set_content_(const char* value);
  void set_content_(const void* value, size_t size);
  ::std::string* mutable_content_();
  ::std::string* release_content_();
  void set_allocated_content_(::std::string* content_);

  // .pack.Addition addition_ = 3;
  bool has_addition_() const;
  void clear_addition_();
  static const int kAdditionFieldNumber = 3;
  private:
  const ::pack::Addition& _internal_addition_() const;
  public:
  const ::pack::Addition& addition_() const;
  ::pack::Addition* release_addition_();
  ::pack::Addition* mutable_addition_();
  void set_allocated_addition_(::pack::Addition* addition_);

  // .pack.MessagePack.Flow flow_ = 1;
  void clear_flow_();
  static const int kFlowFieldNumber = 1;
  ::pack::MessagePack_Flow flow_() const;
  void set_flow_(::pack::MessagePack_Flow value);

  // .pack.MessagePack.Type type_ = 2;
  void clear_type_();
  static const int kTypeFieldNumber = 2;
  ::pack::MessagePack_Type type_() const;
  void set_type_(::pack::MessagePack_Type value);

  // @@protoc_insertion_point(class_scope:pack.MessagePack)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr content__;
  ::pack::Addition* addition__;
  int flow__;
  int type__;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_pack_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Frame

// uint64 sequence_id_ = 1;
inline void Frame::clear_sequence_id_() {
  sequence_id__ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Frame::sequence_id_() const {
  // @@protoc_insertion_point(field_get:pack.Frame.sequence_id_)
  return sequence_id__;
}
inline void Frame::set_sequence_id_(::google::protobuf::uint64 value) {
  
  sequence_id__ = value;
  // @@protoc_insertion_point(field_set:pack.Frame.sequence_id_)
}

// uint64 timestamp_ = 2;
inline void Frame::clear_timestamp_() {
  timestamp__ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Frame::timestamp_() const {
  // @@protoc_insertion_point(field_get:pack.Frame.timestamp_)
  return timestamp__;
}
inline void Frame::set_timestamp_(::google::protobuf::uint64 value) {
  
  timestamp__ = value;
  // @@protoc_insertion_point(field_set:pack.Frame.timestamp_)
}

// .pack.Frame.FrameType frame_type_ = 3;
inline void Frame::clear_frame_type_() {
  frame_type__ = 0;
}
inline ::pack::Frame_FrameType Frame::frame_type_() const {
  // @@protoc_insertion_point(field_get:pack.Frame.frame_type_)
  return static_cast< ::pack::Frame_FrameType >(frame_type__);
}
inline void Frame::set_frame_type_(::pack::Frame_FrameType value) {
  
  frame_type__ = value;
  // @@protoc_insertion_point(field_set:pack.Frame.frame_type_)
}

// -------------------------------------------------------------------

// Check

// repeated bytes md5sum = 1;
inline int Check::md5sum_size() const {
  return md5sum_.size();
}
inline void Check::clear_md5sum() {
  md5sum_.Clear();
}
inline const ::std::string& Check::md5sum(int index) const {
  // @@protoc_insertion_point(field_get:pack.Check.md5sum)
  return md5sum_.Get(index);
}
inline ::std::string* Check::mutable_md5sum(int index) {
  // @@protoc_insertion_point(field_mutable:pack.Check.md5sum)
  return md5sum_.Mutable(index);
}
inline void Check::set_md5sum(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pack.Check.md5sum)
  md5sum_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Check::set_md5sum(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:pack.Check.md5sum)
  md5sum_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Check::set_md5sum(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  md5sum_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pack.Check.md5sum)
}
inline void Check::set_md5sum(int index, const void* value, size_t size) {
  md5sum_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pack.Check.md5sum)
}
inline ::std::string* Check::add_md5sum() {
  // @@protoc_insertion_point(field_add_mutable:pack.Check.md5sum)
  return md5sum_.Add();
}
inline void Check::add_md5sum(const ::std::string& value) {
  md5sum_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pack.Check.md5sum)
}
#if LANG_CXX11
inline void Check::add_md5sum(::std::string&& value) {
  md5sum_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:pack.Check.md5sum)
}
#endif
inline void Check::add_md5sum(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  md5sum_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pack.Check.md5sum)
}
inline void Check::add_md5sum(const void* value, size_t size) {
  md5sum_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pack.Check.md5sum)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Check::md5sum() const {
  // @@protoc_insertion_point(field_list:pack.Check.md5sum)
  return md5sum_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Check::mutable_md5sum() {
  // @@protoc_insertion_point(field_mutable_list:pack.Check.md5sum)
  return &md5sum_;
}

// -------------------------------------------------------------------

// Addition

// .pack.Check check_ = 1;
inline bool Addition::has_check_() const {
  return this != internal_default_instance() && check__ != NULL;
}
inline void Addition::clear_check_() {
  if (GetArenaNoVirtual() == NULL && check__ != NULL) {
    delete check__;
  }
  check__ = NULL;
}
inline const ::pack::Check& Addition::_internal_check_() const {
  return *check__;
}
inline const ::pack::Check& Addition::check_() const {
  const ::pack::Check* p = check__;
  // @@protoc_insertion_point(field_get:pack.Addition.check_)
  return p != NULL ? *p : *reinterpret_cast<const ::pack::Check*>(
      &::pack::_Check_default_instance_);
}
inline ::pack::Check* Addition::release_check_() {
  // @@protoc_insertion_point(field_release:pack.Addition.check_)
  
  ::pack::Check* temp = check__;
  check__ = NULL;
  return temp;
}
inline ::pack::Check* Addition::mutable_check_() {
  
  if (check__ == NULL) {
    auto* p = CreateMaybeMessage<::pack::Check>(GetArenaNoVirtual());
    check__ = p;
  }
  // @@protoc_insertion_point(field_mutable:pack.Addition.check_)
  return check__;
}
inline void Addition::set_allocated_check_(::pack::Check* check_) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete check__;
  }
  if (check_) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      check_ = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, check_, submessage_arena);
    }
    
  } else {
    
  }
  check__ = check_;
  // @@protoc_insertion_point(field_set_allocated:pack.Addition.check_)
}

// .pack.Frame frame_ = 2;
inline bool Addition::has_frame_() const {
  return this != internal_default_instance() && frame__ != NULL;
}
inline void Addition::clear_frame_() {
  if (GetArenaNoVirtual() == NULL && frame__ != NULL) {
    delete frame__;
  }
  frame__ = NULL;
}
inline const ::pack::Frame& Addition::_internal_frame_() const {
  return *frame__;
}
inline const ::pack::Frame& Addition::frame_() const {
  const ::pack::Frame* p = frame__;
  // @@protoc_insertion_point(field_get:pack.Addition.frame_)
  return p != NULL ? *p : *reinterpret_cast<const ::pack::Frame*>(
      &::pack::_Frame_default_instance_);
}
inline ::pack::Frame* Addition::release_frame_() {
  // @@protoc_insertion_point(field_release:pack.Addition.frame_)
  
  ::pack::Frame* temp = frame__;
  frame__ = NULL;
  return temp;
}
inline ::pack::Frame* Addition::mutable_frame_() {
  
  if (frame__ == NULL) {
    auto* p = CreateMaybeMessage<::pack::Frame>(GetArenaNoVirtual());
    frame__ = p;
  }
  // @@protoc_insertion_point(field_mutable:pack.Addition.frame_)
  return frame__;
}
inline void Addition::set_allocated_frame_(::pack::Frame* frame_) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete frame__;
  }
  if (frame_) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      frame_ = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, frame_, submessage_arena);
    }
    
  } else {
    
  }
  frame__ = frame_;
  // @@protoc_insertion_point(field_set_allocated:pack.Addition.frame_)
}

// -------------------------------------------------------------------

// MessagePack

// .pack.MessagePack.Flow flow_ = 1;
inline void MessagePack::clear_flow_() {
  flow__ = 0;
}
inline ::pack::MessagePack_Flow MessagePack::flow_() const {
  // @@protoc_insertion_point(field_get:pack.MessagePack.flow_)
  return static_cast< ::pack::MessagePack_Flow >(flow__);
}
inline void MessagePack::set_flow_(::pack::MessagePack_Flow value) {
  
  flow__ = value;
  // @@protoc_insertion_point(field_set:pack.MessagePack.flow_)
}

// .pack.MessagePack.Type type_ = 2;
inline void MessagePack::clear_type_() {
  type__ = 0;
}
inline ::pack::MessagePack_Type MessagePack::type_() const {
  // @@protoc_insertion_point(field_get:pack.MessagePack.type_)
  return static_cast< ::pack::MessagePack_Type >(type__);
}
inline void MessagePack::set_type_(::pack::MessagePack_Type value) {
  
  type__ = value;
  // @@protoc_insertion_point(field_set:pack.MessagePack.type_)
}

// .pack.Addition addition_ = 3;
inline bool MessagePack::has_addition_() const {
  return this != internal_default_instance() && addition__ != NULL;
}
inline void MessagePack::clear_addition_() {
  if (GetArenaNoVirtual() == NULL && addition__ != NULL) {
    delete addition__;
  }
  addition__ = NULL;
}
inline const ::pack::Addition& MessagePack::_internal_addition_() const {
  return *addition__;
}
inline const ::pack::Addition& MessagePack::addition_() const {
  const ::pack::Addition* p = addition__;
  // @@protoc_insertion_point(field_get:pack.MessagePack.addition_)
  return p != NULL ? *p : *reinterpret_cast<const ::pack::Addition*>(
      &::pack::_Addition_default_instance_);
}
inline ::pack::Addition* MessagePack::release_addition_() {
  // @@protoc_insertion_point(field_release:pack.MessagePack.addition_)
  
  ::pack::Addition* temp = addition__;
  addition__ = NULL;
  return temp;
}
inline ::pack::Addition* MessagePack::mutable_addition_() {
  
  if (addition__ == NULL) {
    auto* p = CreateMaybeMessage<::pack::Addition>(GetArenaNoVirtual());
    addition__ = p;
  }
  // @@protoc_insertion_point(field_mutable:pack.MessagePack.addition_)
  return addition__;
}
inline void MessagePack::set_allocated_addition_(::pack::Addition* addition_) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete addition__;
  }
  if (addition_) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      addition_ = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, addition_, submessage_arena);
    }
    
  } else {
    
  }
  addition__ = addition_;
  // @@protoc_insertion_point(field_set_allocated:pack.MessagePack.addition_)
}

// bytes content_ = 4;
inline void MessagePack::clear_content_() {
  content__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MessagePack::content_() const {
  // @@protoc_insertion_point(field_get:pack.MessagePack.content_)
  return content__.GetNoArena();
}
inline void MessagePack::set_content_(const ::std::string& value) {
  
  content__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pack.MessagePack.content_)
}
#if LANG_CXX11
inline void MessagePack::set_content_(::std::string&& value) {
  
  content__.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pack.MessagePack.content_)
}
#endif
inline void MessagePack::set_content_(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  content__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pack.MessagePack.content_)
}
inline void MessagePack::set_content_(const void* value, size_t size) {
  
  content__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pack.MessagePack.content_)
}
inline ::std::string* MessagePack::mutable_content_() {
  
  // @@protoc_insertion_point(field_mutable:pack.MessagePack.content_)
  return content__.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MessagePack::release_content_() {
  // @@protoc_insertion_point(field_release:pack.MessagePack.content_)
  
  return content__.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MessagePack::set_allocated_content_(::std::string* content_) {
  if (content_ != NULL) {
    
  } else {
    
  }
  content__.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content_);
  // @@protoc_insertion_point(field_set_allocated:pack.MessagePack.content_)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pack

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::pack::Frame_FrameType> : ::std::true_type {};
template <> struct is_proto_enum< ::pack::MessagePack_Flow> : ::std::true_type {};
template <> struct is_proto_enum< ::pack::MessagePack_Type> : ::std::true_type {};

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_pack_2eproto
