// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pack.proto

#include "pack.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_pack_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_pack_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Check;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_pack_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Frame;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_pack_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Addition;
}  // namespace protobuf_pack_2eproto
namespace pack {
class FrameDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Frame>
      _instance;
} _Frame_default_instance_;
class CheckDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Check>
      _instance;
} _Check_default_instance_;
class AdditionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Addition>
      _instance;
} _Addition_default_instance_;
class MessagePackDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MessagePack>
      _instance;
} _MessagePack_default_instance_;
}  // namespace pack
namespace protobuf_pack_2eproto {
static void InitDefaultsFrame() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pack::_Frame_default_instance_;
    new (ptr) ::pack::Frame();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pack::Frame::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Frame =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFrame}, {}};

static void InitDefaultsCheck() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pack::_Check_default_instance_;
    new (ptr) ::pack::Check();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pack::Check::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Check =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCheck}, {}};

static void InitDefaultsAddition() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pack::_Addition_default_instance_;
    new (ptr) ::pack::Addition();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pack::Addition::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Addition =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsAddition}, {
      &protobuf_pack_2eproto::scc_info_Check.base,
      &protobuf_pack_2eproto::scc_info_Frame.base,}};

static void InitDefaultsMessagePack() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pack::_MessagePack_default_instance_;
    new (ptr) ::pack::MessagePack();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pack::MessagePack::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_MessagePack =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsMessagePack}, {
      &protobuf_pack_2eproto::scc_info_Addition.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Frame.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Check.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Addition.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MessagePack.base);
}

}  // namespace protobuf_pack_2eproto
namespace pack {
bool Frame_FrameType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Frame_FrameType Frame::Unkown;
const Frame_FrameType Frame::SmartFrame;
const Frame_FrameType Frame::DropFrame;
const Frame_FrameType Frame::ErrorFrame;
const Frame_FrameType Frame::FrameType_MIN;
const Frame_FrameType Frame::FrameType_MAX;
const int Frame::FrameType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool MessagePack_Flow_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const MessagePack_Flow MessagePack::Unknown;
const MessagePack_Flow MessagePack::AP2CP;
const MessagePack_Flow MessagePack::CP2AP;
const MessagePack_Flow MessagePack::Flow_MIN;
const MessagePack_Flow MessagePack::Flow_MAX;
const int MessagePack::Flow_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool MessagePack_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const MessagePack_Type MessagePack::kUnknown;
const MessagePack_Type MessagePack::kXPlugin;
const MessagePack_Type MessagePack::kXConfig;
const MessagePack_Type MessagePack::Type_MIN;
const MessagePack_Type MessagePack::Type_MAX;
const int MessagePack::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void Frame::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Frame::kSequenceIdFieldNumber;
const int Frame::kTimestampFieldNumber;
const int Frame::kFrameTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Frame::Frame()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_pack_2eproto::scc_info_Frame.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:pack.Frame)
}
Frame::Frame(const Frame& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&sequence_id__, &from.sequence_id__,
    static_cast<size_t>(reinterpret_cast<char*>(&frame_type__) -
    reinterpret_cast<char*>(&sequence_id__)) + sizeof(frame_type__));
  // @@protoc_insertion_point(copy_constructor:pack.Frame)
}

void Frame::SharedCtor() {
  ::memset(&sequence_id__, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&frame_type__) -
      reinterpret_cast<char*>(&sequence_id__)) + sizeof(frame_type__));
}

Frame::~Frame() {
  // @@protoc_insertion_point(destructor:pack.Frame)
  SharedDtor();
}

void Frame::SharedDtor() {
}

void Frame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Frame& Frame::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_pack_2eproto::scc_info_Frame.base);
  return *internal_default_instance();
}


void Frame::Clear() {
// @@protoc_insertion_point(message_clear_start:pack.Frame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&sequence_id__, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&frame_type__) -
      reinterpret_cast<char*>(&sequence_id__)) + sizeof(frame_type__));
  _internal_metadata_.Clear();
}

bool Frame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:pack.Frame)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 sequence_id_ = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sequence_id__)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 timestamp_ = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp__)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pack.Frame.FrameType frame_type_ = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_frame_type_(static_cast< ::pack::Frame_FrameType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pack.Frame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pack.Frame)
  return false;
#undef DO_
}

void Frame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pack.Frame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 sequence_id_ = 1;
  if (this->sequence_id_() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->sequence_id_(), output);
  }

  // uint64 timestamp_ = 2;
  if (this->timestamp_() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->timestamp_(), output);
  }

  // .pack.Frame.FrameType frame_type_ = 3;
  if (this->frame_type_() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->frame_type_(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:pack.Frame)
}

size_t Frame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pack.Frame)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // uint64 sequence_id_ = 1;
  if (this->sequence_id_() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->sequence_id_());
  }

  // uint64 timestamp_ = 2;
  if (this->timestamp_() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timestamp_());
  }

  // .pack.Frame.FrameType frame_type_ = 3;
  if (this->frame_type_() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->frame_type_());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Frame::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Frame*>(&from));
}

void Frame::MergeFrom(const Frame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pack.Frame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sequence_id_() != 0) {
    set_sequence_id_(from.sequence_id_());
  }
  if (from.timestamp_() != 0) {
    set_timestamp_(from.timestamp_());
  }
  if (from.frame_type_() != 0) {
    set_frame_type_(from.frame_type_());
  }
}

void Frame::CopyFrom(const Frame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pack.Frame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Frame::IsInitialized() const {
  return true;
}

void Frame::Swap(Frame* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Frame::InternalSwap(Frame* other) {
  using std::swap;
  swap(sequence_id__, other->sequence_id__);
  swap(timestamp__, other->timestamp__);
  swap(frame_type__, other->frame_type__);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string Frame::GetTypeName() const {
  return "pack.Frame";
}


// ===================================================================

void Check::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Check::kMd5SumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Check::Check()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_pack_2eproto::scc_info_Check.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:pack.Check)
}
Check::Check(const Check& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      md5sum_(from.md5sum_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pack.Check)
}

void Check::SharedCtor() {
}

Check::~Check() {
  // @@protoc_insertion_point(destructor:pack.Check)
  SharedDtor();
}

void Check::SharedDtor() {
}

void Check::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Check& Check::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_pack_2eproto::scc_info_Check.base);
  return *internal_default_instance();
}


void Check::Clear() {
// @@protoc_insertion_point(message_clear_start:pack.Check)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  md5sum_.Clear();
  _internal_metadata_.Clear();
}

bool Check::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:pack.Check)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bytes md5sum = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_md5sum()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pack.Check)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pack.Check)
  return false;
#undef DO_
}

void Check::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pack.Check)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes md5sum = 1;
  for (int i = 0, n = this->md5sum_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->md5sum(i), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:pack.Check)
}

size_t Check::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pack.Check)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // repeated bytes md5sum = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->md5sum_size());
  for (int i = 0, n = this->md5sum_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->md5sum(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Check::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Check*>(&from));
}

void Check::MergeFrom(const Check& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pack.Check)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  md5sum_.MergeFrom(from.md5sum_);
}

void Check::CopyFrom(const Check& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pack.Check)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Check::IsInitialized() const {
  return true;
}

void Check::Swap(Check* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Check::InternalSwap(Check* other) {
  using std::swap;
  md5sum_.InternalSwap(CastToBase(&other->md5sum_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string Check::GetTypeName() const {
  return "pack.Check";
}


// ===================================================================

void Addition::InitAsDefaultInstance() {
  ::pack::_Addition_default_instance_._instance.get_mutable()->check__ = const_cast< ::pack::Check*>(
      ::pack::Check::internal_default_instance());
  ::pack::_Addition_default_instance_._instance.get_mutable()->frame__ = const_cast< ::pack::Frame*>(
      ::pack::Frame::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Addition::kCheckFieldNumber;
const int Addition::kFrameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Addition::Addition()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_pack_2eproto::scc_info_Addition.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:pack.Addition)
}
Addition::Addition(const Addition& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_check_()) {
    check__ = new ::pack::Check(*from.check__);
  } else {
    check__ = NULL;
  }
  if (from.has_frame_()) {
    frame__ = new ::pack::Frame(*from.frame__);
  } else {
    frame__ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:pack.Addition)
}

void Addition::SharedCtor() {
  ::memset(&check__, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&frame__) -
      reinterpret_cast<char*>(&check__)) + sizeof(frame__));
}

Addition::~Addition() {
  // @@protoc_insertion_point(destructor:pack.Addition)
  SharedDtor();
}

void Addition::SharedDtor() {
  if (this != internal_default_instance()) delete check__;
  if (this != internal_default_instance()) delete frame__;
}

void Addition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Addition& Addition::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_pack_2eproto::scc_info_Addition.base);
  return *internal_default_instance();
}


void Addition::Clear() {
// @@protoc_insertion_point(message_clear_start:pack.Addition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && check__ != NULL) {
    delete check__;
  }
  check__ = NULL;
  if (GetArenaNoVirtual() == NULL && frame__ != NULL) {
    delete frame__;
  }
  frame__ = NULL;
  _internal_metadata_.Clear();
}

bool Addition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:pack.Addition)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .pack.Check check_ = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_check_()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pack.Frame frame_ = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_frame_()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pack.Addition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pack.Addition)
  return false;
#undef DO_
}

void Addition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pack.Addition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pack.Check check_ = 1;
  if (this->has_check_()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_check_(), output);
  }

  // .pack.Frame frame_ = 2;
  if (this->has_frame_()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->_internal_frame_(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:pack.Addition)
}

size_t Addition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pack.Addition)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // .pack.Check check_ = 1;
  if (this->has_check_()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *check__);
  }

  // .pack.Frame frame_ = 2;
  if (this->has_frame_()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *frame__);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Addition::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Addition*>(&from));
}

void Addition::MergeFrom(const Addition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pack.Addition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_check_()) {
    mutable_check_()->::pack::Check::MergeFrom(from.check_());
  }
  if (from.has_frame_()) {
    mutable_frame_()->::pack::Frame::MergeFrom(from.frame_());
  }
}

void Addition::CopyFrom(const Addition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pack.Addition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Addition::IsInitialized() const {
  return true;
}

void Addition::Swap(Addition* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Addition::InternalSwap(Addition* other) {
  using std::swap;
  swap(check__, other->check__);
  swap(frame__, other->frame__);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string Addition::GetTypeName() const {
  return "pack.Addition";
}


// ===================================================================

void MessagePack::InitAsDefaultInstance() {
  ::pack::_MessagePack_default_instance_._instance.get_mutable()->addition__ = const_cast< ::pack::Addition*>(
      ::pack::Addition::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MessagePack::kFlowFieldNumber;
const int MessagePack::kTypeFieldNumber;
const int MessagePack::kAdditionFieldNumber;
const int MessagePack::kContentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MessagePack::MessagePack()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_pack_2eproto::scc_info_MessagePack.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:pack.MessagePack)
}
MessagePack::MessagePack(const MessagePack& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  content__.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.content_().size() > 0) {
    content__.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content__);
  }
  if (from.has_addition_()) {
    addition__ = new ::pack::Addition(*from.addition__);
  } else {
    addition__ = NULL;
  }
  ::memcpy(&flow__, &from.flow__,
    static_cast<size_t>(reinterpret_cast<char*>(&type__) -
    reinterpret_cast<char*>(&flow__)) + sizeof(type__));
  // @@protoc_insertion_point(copy_constructor:pack.MessagePack)
}

void MessagePack::SharedCtor() {
  content__.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&addition__, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type__) -
      reinterpret_cast<char*>(&addition__)) + sizeof(type__));
}

MessagePack::~MessagePack() {
  // @@protoc_insertion_point(destructor:pack.MessagePack)
  SharedDtor();
}

void MessagePack::SharedDtor() {
  content__.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete addition__;
}

void MessagePack::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MessagePack& MessagePack::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_pack_2eproto::scc_info_MessagePack.base);
  return *internal_default_instance();
}


void MessagePack::Clear() {
// @@protoc_insertion_point(message_clear_start:pack.MessagePack)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  content__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && addition__ != NULL) {
    delete addition__;
  }
  addition__ = NULL;
  ::memset(&flow__, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type__) -
      reinterpret_cast<char*>(&flow__)) + sizeof(type__));
  _internal_metadata_.Clear();
}

bool MessagePack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:pack.MessagePack)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .pack.MessagePack.Flow flow_ = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_flow_(static_cast< ::pack::MessagePack_Flow >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pack.MessagePack.Type type_ = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type_(static_cast< ::pack::MessagePack_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pack.Addition addition_ = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_addition_()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes content_ = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content_()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pack.MessagePack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pack.MessagePack)
  return false;
#undef DO_
}

void MessagePack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pack.MessagePack)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pack.MessagePack.Flow flow_ = 1;
  if (this->flow_() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->flow_(), output);
  }

  // .pack.MessagePack.Type type_ = 2;
  if (this->type_() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type_(), output);
  }

  // .pack.Addition addition_ = 3;
  if (this->has_addition_()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->_internal_addition_(), output);
  }

  // bytes content_ = 4;
  if (this->content_().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->content_(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:pack.MessagePack)
}

size_t MessagePack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pack.MessagePack)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // bytes content_ = 4;
  if (this->content_().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->content_());
  }

  // .pack.Addition addition_ = 3;
  if (this->has_addition_()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *addition__);
  }

  // .pack.MessagePack.Flow flow_ = 1;
  if (this->flow_() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->flow_());
  }

  // .pack.MessagePack.Type type_ = 2;
  if (this->type_() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type_());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MessagePack::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MessagePack*>(&from));
}

void MessagePack::MergeFrom(const MessagePack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pack.MessagePack)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.content_().size() > 0) {

    content__.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content__);
  }
  if (from.has_addition_()) {
    mutable_addition_()->::pack::Addition::MergeFrom(from.addition_());
  }
  if (from.flow_() != 0) {
    set_flow_(from.flow_());
  }
  if (from.type_() != 0) {
    set_type_(from.type_());
  }
}

void MessagePack::CopyFrom(const MessagePack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pack.MessagePack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessagePack::IsInitialized() const {
  return true;
}

void MessagePack::Swap(MessagePack* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MessagePack::InternalSwap(MessagePack* other) {
  using std::swap;
  content__.Swap(&other->content__, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(addition__, other->addition__);
  swap(flow__, other->flow__);
  swap(type__, other->type__);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string MessagePack::GetTypeName() const {
  return "pack.MessagePack";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace pack
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pack::Frame* Arena::CreateMaybeMessage< ::pack::Frame >(Arena* arena) {
  return Arena::CreateInternal< ::pack::Frame >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pack::Check* Arena::CreateMaybeMessage< ::pack::Check >(Arena* arena) {
  return Arena::CreateInternal< ::pack::Check >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pack::Addition* Arena::CreateMaybeMessage< ::pack::Addition >(Arena* arena) {
  return Arena::CreateInternal< ::pack::Addition >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pack::MessagePack* Arena::CreateMaybeMessage< ::pack::MessagePack >(Arena* arena) {
  return Arena::CreateInternal< ::pack::MessagePack >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
