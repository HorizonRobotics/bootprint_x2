/*!
 * -------------------------------------------
 * Copyright (c) 2019, Horizon Robotics, Inc.
 * All rights reserved.
 * \File     sample_plugin.cpp
 * \Author Songshan Gong
 * \Mail     songshan.gong@horizon.ai
 * \Version  1.0.0.0
 * \Date     2019-07-30
 * \Brief    Sample custom plugin
 * \DO NOT MODIFY THIS COMMENT, \
 * \WHICH IS AUTO GENERATED BY EDITOR
 * -------------------------------------------
 */
#include "smart_video.h"

static std::shared_ptr<SmartConsumerPlugin> sc_plg;
InterfaceDeviceStream* CreateDeviceStream()
{
    XMsgQueue::Instance().RegistMsgType(
            TYPE_SMART_MESSAGE, SmartMessage::Deserialize);
    sc_plg = std::make_shared<SmartConsumerPlugin>();
    sc_plg->Init();
    sc_plg->Start();
    return sc_plg.get();
}


void DestroyDeviceStream(InterfaceDeviceStream *stream)
{
}

//struct SmartContext {
//    std::vector<std::shared_ptr<XPluginAsync> > plugins;
//    volatile bool exit;
//    SmartContext() : exit(false) {
//        plugins.clear();
//    }
//};
//SmartContext g_ctx;
//static void signal_handle(int param) {
//    std::cout << "recv signal " << param
//              << ", stop" << std::endl;
//    if (param == SIGINT) {
//        g_ctx.exit = true;
//    }
//}
//int main(int argc, char *argv[]) {
//    SetLogLevel(HOBOT_LOG_DEBUG);
//    // 注册消息类型反序列化回调,用于将序列化后的字符串转成结构体对象
//    XMsgQueue::Instance().RegistMsgType(
//            TYPE_SMART_MESSAGE, SmartMessage::Deserialize);
//
//    signal(SIGINT, signal_handle);
//    signal(SIGPIPE, signal_handle);
//    // signal(SIGSEGV, signal_handle);
//
//    auto sc_plg = std::make_shared<SmartConsumerPlugin>();
//    sc_plg->Init();
//    g_ctx.plugins.push_back(sc_plg);
//
//    for (auto& plugin : g_ctx.plugins) {
//        plugin->Start();
//    }
//
//    while (!g_ctx.exit) {
//        std::this_thread::sleep_for(milliseconds(1000));
//    }
//
//    for (auto& plugin : g_ctx.plugins) {
//        plugin->Stop();
//    }
//
//    return 0;
//}
