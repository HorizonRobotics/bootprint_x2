apply plugin: 'maven'
apply plugin: 'java'

buildscript {
    repositories {
        maven { url "http://ci.horizon-robotics.com:8081/artifactory/jcenter/" }
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:2.0.0'
        classpath 'me.tatarka:gradle-retrolambda:3.2.4'
    }
}

ext {
    props = GetProps()
    generalDeps = GetGeneralDeps();
    revision = GetGitRevision()
    artifact = props["install_artifact"].split(':')
    depend_artifacts = []
    ver = artifact[2]
}


configurations {
    compile {
        resolutionStrategy {
            componentSelection {
                def versionSuffix = GetVersionSuffix()
                all { ComponentSelection selection ->
                    def module = selection.candidate.module.toString()
                    def group = selection.candidate.group.toString()
                    if (!selection.candidate.version.endsWith(versionSuffix)) {
                        if(!(generalDeps.containsKey(group) && generalDeps[group].equals(module))) {
                              selection.reject("no")
                        } 
                    }
                }
            }
        }
    }
}

configurations.all {
    // cache dynamic versions for 1 minute
    resolutionStrategy.cacheDynamicVersionsFor 1, 'minutes'
}

def DepCopy(fromFile, intoFile) {
    copy {
        from zipTree(fromFile)
        into file(intoFile)
    }
}

def GetProps() {
    Properties props = new Properties()
    if (file("build.properties").exists()) {
        println "LOAD PROPERTIES FROM FILE:build.properties"
        props.load(new FileInputStream(file("build.properties")))
    }
    if (file("build.properties.local").exists()) {
        println "LOAD PROPERTIES FROM FILE:build.properties.local"
        props.load(new FileInputStream(file("build.properties.local")))
    }
    return props
}


def GetGeneralDeps() {
    def generalDeps = [:]
    props.each { prop ->
      if (prop.key.startsWith("artifact") && !prop.key.contains('_exclude')) {
            def values = prop.value.split(':')
            if(values.length >= 6 && values[5].equals('true')) {
                generalDeps[values[0]] = values[1]
            }
        }
    }
    return generalDeps
}

def GetGitRevision() {
    def revisionOutput = new ByteArrayOutputStream()
    def revisionError = new ByteArrayOutputStream()
    try {
        exec {
            commandLine "git", "log", "-n", "1"
            standardOutput = revisionOutput
            errorOutput = revisionError
        }
        return revisionOutput.toString()
    } catch (all) {
        println "WARNING:EXEC `git log -n 1` FAILED"
        println "WARNING: GET GIT REVISION FAILED , MAKE SURE IT'S A GIT REPO AND HAS ONE COMMIT AT LEAST"
    }
    return "git revision"

}


def GetVersionSuffix() {
    def suffix = '_' + props['platform'];
    def platform = props['platform'];
    def architecture = props['architecture'];
    if (architecture.equals("default")
            || (platform.equals("linux") && architecture.equals("x86"))
            || (platform.equals("android") && architecture.equals("arm"))) {
    } else {
        suffix = suffix + '_' + architecture;
    }
    def vendor = props['vendor'];
    if (vendor.equals("default")) {
        // do nothing
    } else {
        suffix =  suffix + '_' + vendor;
    }
    def toolchain = props['toolchain'];
    if (toolchain.equals("default")) {
        // do nothing
    } else {
        suffix =  suffix + '_' + toolchain;
    }
    return suffix;
}

repositories {
    props.each { prop ->
        if (prop.key.startsWith("dependency_repository")) {
            prop.value = prop.value.replace("{USER_HOME}", System.getProperty("user.home"))
            def userNameKey = prop.key.split('_')[1] + "_username"
            if (props.containsKey(userNameKey)) {
                def passwordKey = prop.key.split('_')[1] + "_password"
                maven {
                    url prop.value
                    credentials {
                        username props[userNameKey]
                        password props[passwordKey]
                    }
                    authentication {
                        basic(BasicAuthentication)
                    }
                }
            } else {
                maven { url prop.value }
            }
        }
    }
}

dependencies {
    def platform = props["platform"]
    def versionSuffix = GetVersionSuffix();
    props.each { prop ->
        if (prop.key.startsWith("artifact") && !prop.key.contains('_exclude')) {
            def values = prop.value.split(':')
            def artifactVersion = values[2]
            def artifactGeneral = "false"
            if(values.length >=6 && values[5].equals("true")) {
                artifactGeneral = "true"
            }
            if(!artifactGeneral.equals("true")) {
                if (!artifactVersion.contains('+')) {
                    artifactVersion = artifactVersion + versionSuffix
                }
            }

            compile(group: values[0], name: values[1], version: artifactVersion, ext: values[3])
            // solve tree dependency and excludes
            def excludeKey = prop.key + "_exclude"
            if (props.containsKey(excludeKey)) {
                def excludes = props[excludeKey].split(',')
                compile(group: values[0], name: values[1], version: artifactVersion) {
                    excludes.each {
                        def patterns = it.split(':')
                        if ((!patterns[0].contains('*')) && (!patterns[1].contains('*'))) {
                            exclude(group: patterns[0], module: patterns[1])
                        } else if ((!patterns[0].contains('*')) && (patterns[1].contains('*'))) {
                            exclude(group: patterns[0])
                        } else if ((patterns[0].contains('*')) && (!patterns[1].contains('*'))) {
                            exclude(module: patterns[1])
                        }
                    }
                }
            } else {
                compile(group: values[0], name: values[1], version: artifactVersion)
            }
        }
    }
}

task solveDependencies(type: Copy) {
    def cache_root = "{USER_HOME}/.gradle/caches/modules-2/files-2.1/"
    if (props.containsKey("cache_root")) {
        cache_root = props["cache_root"]
    }
    if (cache_root.startsWith("./")) {
        cache_root = System.getProperty("user.dir").replace("\\", "/") + "/" + cache_root
    }
    def gradle_root = System.getenv("GRADLE_USER_HOME")
    if (gradle_root != null) {
        cache_root = gradle_root + "/" + "caches/modules-2/files-2.1/"
    }
    def tmp_file_name = "dep" + GetVersionSuffix() + ".tmp"
    println "tmp file name" + tmp_file_name
    def tmpF = new File(tmp_file_name)
    tmpF.text = "";
    cache_root = cache_root.replace("{USER_HOME}", System.getProperty("user.home"))
    configurations.compile.each {
        File f ->
            if (f.name.endsWith("zip")) {
                def hashFile = f.getParentFile()
                def versionFile = hashFile.getParentFile()
                def artifactIdFile = versionFile.getParentFile()
                def groupIdFile = artifactIdFile.getParentFile()
                // no hash directory
                if (f.name != (artifactIdFile.name + "-" + versionFile.name + ".zip")) {
                    groupIdFile = artifactIdFile
                    artifactIdFile = versionFile
                    versionFile = hashFile
                }
                def cache_dir = cache_root + groupIdFile.name + "/" + artifactIdFile.name + "/" + versionFile.name + "/files"
                if (!file(cache_dir).exists()) {
                    DepCopy(f, cache_dir)
                }
                tmpF.text = tmpF.text + cache_dir + "/" + artifactIdFile.name + "\n"
            }
    }
}

task copyRuntime(type: Copy) {

    if (project.hasProperty("dest")) {
        configurations.compile.each {
            if (it.name.endsWith("zip")) {
                from zipTree(it).matching {
                    include '*/lib/*'
                    include '*/bin/*'
                    include '*/etc/*'
                    exclude '*/lib/*.a'
                    exclude '*/lib/*.lib'
                }.files

                into project.dest
            }
        }
    }
}

task dist(type: Zip) {
    from 'output'
}

artifacts {
    archives dist
}

uploadArchives {
    repositories {
        mavenDeployer {
            pom.groupId = artifact[0]
            if (!(artifact[0].startsWith("com.hobot.native") || artifact[0].startsWith("third_party") || artifact[0].startsWith("com.hobot.java"))) {
                println "INSTALL ARTIFACT GROUP:" + artifact[0]
                throw new GradleException("INSTALL ARTIFACT GROUP should start with 'com.hobot.native'  or 'com.hobot.java' or 'third_party'")
            }
            if (!artifact[2].matches("[0-9]+\\.[0-9]+\\.[0-9]+")) {
                println "INSTALL ARTIFACT VERSION:" + artifact[2]
                throw new GradleException("INSTALL ARTIFACT VERSION should match '[0-9]+.[0-9]+.[0-9]+'")
            }
            pom.artifactId = artifact[1]
            if(artifact.length >= 5 && artifact[4].equals("true")) {
                pom.version = ver;
            } else{
                pom.version = ver + GetVersionSuffix()
            }
            pom.withXml {
                asNode().appendNode('description', revision)
            }

            def exclude = []
            props.each { prop ->
                if (prop.key.startsWith("artifact")
                        && !prop.key.contains('_exclude')) {
                    def values = prop.value.split(':')
                    if (! (values.length >= 5 && values[4].equals("true")) ) {
                        exclude.add(values[0] + ":" + values[1])
                    }
                }
            }
            pom.whenConfigured {
                p ->
                    p.dependencies = p.dependencies.findAll {
                        dep -> !exclude.contains(dep.groupId + ":" + dep.artifactId)
                    }
            }

            def repoUrl = props["install_repository"]
            if (repoUrl.startsWith('http')) {
                repository(url: repoUrl) {
                    authentication(userName: props["username"],
                            password: props["password"])
                }
            } else if (repoUrl.startsWith('file')) {
                repoUrl = repoUrl.replace("{USER_HOME}", System.getProperty("user.home"))
                repository(url: repoUrl)
            }
        }
    }
}
